// fetches and renders information about individual vulnerabilities

const displayColumns = ["Image", "First Detected", "Last Detected", "Days Vulnerable"];
const dataColumns = ["image", "first_seen", "last_seen", "duration"];
const id = getVulnID();

const data = await getData(`https://storage.googleapis.com/chainguard-academy/vulnerability-info/${id}.json`);

updateTitleAndURLs();
showVuln();

function getVulnID() {
  let id = "";
  let host = document.location.host;
  if (host.match(`.+netlify.app:443`) || host == "localhost:1313") {
    id = new URLSearchParams(document.location.search).get("id");
  } else {
    id = document.location.pathname.split("/").pop();
  }
  return id;
}

async function getData(url) {
  let res = await fetch(url);
  if (res.ok) {
    return await res.json();
  } else {
    return null;
  }
}

function updateTitleAndURLs() {
  let vuln = data;
  const title = document.querySelector("#rumble-vuln h2#id");
  title.innerHTML = `${id} <span style="color: ${severityColours[vuln.severity]}; vertical-align: text-bottom; font-size: 0.75rem; padding: 0.5rem; ">â¬¤</span><span style="vertical-align: text-bottom; font-size: 1rem;">${vuln.severity}</span>`;
  title.hidden = false;

  const headTitle = document.querySelector("head title");
  headTitle.innerText = `Vulnerability Information - ${id}`;

  const link = document.querySelector("head link[rel=canonical]");
  link.href += id;

  const ogTitle = document.querySelector('head meta[property="og:title"]');
  ogTitle.content = `${ogTitle.content} - ${id}`;

  const ogURL = document.querySelector('head meta[property="og:url"]');
  ogURL.content += id;

  const twitterTitle = document.querySelector('head meta[name="twitter:title"]');
  twitterTitle.content = `${twitterTitle.content} - ${id}`;
}

function showVuln() {
  const div = document.querySelector("#vuln-details");
  let vuln = data;

  let desc = document.createElement("p");
  desc.innerHTML = `<p>${vuln.description}</p>`

  let sourceUrl = document.createElement("p");
  sourceUrl.innerHTML = `<strong>Source</strong>: <a href="${vuln.url}">${vuln.url}</a>`

  div.insertAdjacentElement("beforeEnd", desc);
  div.insertAdjacentElement("beforeEnd", sourceUrl);
}

makeTable("#rumble-images-external", data.external_images);
makeTable("#rumble-images-chainguard", data.chainguard_images);

function makeTable(id, images) {

  // sort alphabetically by image name
  if (images !== null) {
    images.sort(function (a, b) {
      var keyA = a.image;
      var keyB = b.image;
      if (keyA < keyB) return -1;
      if (keyA > keyB) return 1;
      return 0;
    });
  } else {
    document.querySelector(id).innerHTML = `<p style="margin: 0; padding: 24px 8px;">No vulnerabilities detected</p>`;
    return;
  }

  // assemble the table
  var table = d3.select(id).append("table")
    .attr("id", `${id}-1`),
    thead = table.append("thead"),
    tbody = table.append("tbody");

  // append the header row
  thead.append("tr")
    .selectAll("th")
    .data(displayColumns)
    .enter()
    .append("th")
    .text(function (column) { return column; });

  if (images === null) {
    return;
  }
  // create a row for each object in the data
  var rows = tbody.selectAll("tr")
    .data(images)
    .enter()
    .append("tr");

  // create a cell in each row for each column
  rows.selectAll("td")
    .data(function (row) {
      return dataColumns.map(function (column) {
        let val = row[column];
        if (column == "first_seen") {
          val = row.dates[0];
          val = val.split("T", 1)[0];
        }
        if (column == "last_seen") {
          val = row.dates[row.dates.length - 1];
          val = val.split("T", 1)[0] // get rid of timestamps
        }
        if (column == "duration") {
          val = row.dates.length;
        }
        return { column: column, value: val };
      });
    })
    .enter()
    .append("td")
    .html(function (d) { return d.value; });
};

