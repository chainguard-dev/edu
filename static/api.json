{
  "swagger": "2.0",
  "info": {
    "title": "Enforce OpenAPI Specification (Alpha)",
    "version": "alpha"
  },
  "paths": {
    "/advisory/v1/documents": {
      "get": {
        "operationId": "SecurityAdvisory_ListDocuments",
        "parameters": [
          {
            "description": "id is the id of a package.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "cves",
            "required": false,
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/advisoryDocumentList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SecurityAdvisory"
        ]
      }
    },
    "/advisory/v1/metadata": {
      "get": {
        "operationId": "SecurityAdvisory_ListVulnerabilityMetadata",
        "parameters": [
          {
            "description": "id is the id of a vuln.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/advisoryVulnerabilityMetadataList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SecurityAdvisory"
        ]
      }
    },
    "/auth/v1/ok": {
      "get": {
        "operationId": "Auth_Validate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authWhoAmI"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/v1/register": {
      "post": {
        "operationId": "Auth_Register",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authRegistrationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authSession"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/events/v1/subscriptions": {
      "get": {
        "operationId": "Subscriptions_List",
        "parameters": [
          {
            "description": "id is the exact UIDP of the record.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "ancestors_of are groups reachable by repeated proceeding from child to parent.",
            "in": "query",
            "name": "uidp.ancestorsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "descendants_of are groups reachable by repeated proceeding from parent to child.",
            "in": "query",
            "name": "uidp.descendantsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "children_of are groups reachable by directly proceeding from parent to children.",
            "in": "query",
            "name": "uidp.childrenOf",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/eventsSubscriptionList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ]
      }
    },
    "/events/v1/subscriptions/{id}": {
      "delete": {
        "operationId": "Subscriptions_Delete",
        "parameters": [
          {
            "description": "id is the exact UIDP of the record.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ]
      }
    },
    "/events/v1/subscriptions/{parentId}": {
      "post": {
        "operationId": "Subscriptions_Create",
        "parameters": [
          {
            "description": "parent_id, The Group UIDP path under which the new subscription is associated.",
            "in": "path",
            "name": "parentId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "description": "Subscription is the subscription to create;",
            "in": "body",
            "name": "subscription",
            "required": true,
            "schema": {
              "$ref": "#/definitions/eventsSubscription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/eventsSubscription"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ]
      }
    },
    "/iam/v1/account_associations": {
      "get": {
        "operationId": "GroupAccountAssociations_List",
        "parameters": [
          {
            "description": "group is the exact UIDP of the group whose associations we want to list.",
            "in": "query",
            "name": "group",
            "required": false,
            "type": "string"
          },
          {
            "description": "name is the exact name of the association.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamAccountAssociationsList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "GroupAccountAssociations"
        ]
      }
    },
    "/iam/v1/account_associations/{group}": {
      "delete": {
        "operationId": "GroupAccountAssociations_Delete",
        "parameters": [
          {
            "description": "group is the exact UIDP of the group whose associations we want to delete.",
            "in": "path",
            "name": "group",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "GroupAccountAssociations"
        ]
      },
      "post": {
        "operationId": "GroupAccountAssociations_Create",
        "parameters": [
          {
            "description": "group is the group with which this account information is associated.",
            "in": "path",
            "name": "group",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "amazon": {
                  "$ref": "#/definitions/AccountAssociationsAmazon",
                  "description": "amazon holds information associating an Amazon account with the group."
                },
                "chainguard": {
                  "$ref": "#/definitions/AccountAssociationsChainguard"
                },
                "description": {
                  "description": "a short description of this association.",
                  "type": "string"
                },
                "github": {
                  "$ref": "#/definitions/AccountAssociationsGitHubInstallation",
                  "description": "github holds information associating a GitHub installation with the group.\nNote: this AccountAssociation type is EXPERIMENTAL."
                },
                "google": {
                  "$ref": "#/definitions/AccountAssociationsGoogle",
                  "description": "google holds information associating a Google project with the group."
                },
                "name": {
                  "description": "name of the association.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamAccountAssociations"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "GroupAccountAssociations"
        ]
      },
      "put": {
        "operationId": "GroupAccountAssociations_Update",
        "parameters": [
          {
            "description": "group is the group with which this account information is associated.",
            "in": "path",
            "name": "group",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "amazon": {
                  "$ref": "#/definitions/AccountAssociationsAmazon",
                  "description": "amazon holds information associating an Amazon account with the group."
                },
                "chainguard": {
                  "$ref": "#/definitions/AccountAssociationsChainguard"
                },
                "description": {
                  "description": "a short description of this association.",
                  "type": "string"
                },
                "github": {
                  "$ref": "#/definitions/AccountAssociationsGitHubInstallation",
                  "description": "github holds information associating a GitHub installation with the group.\nNote: this AccountAssociation type is EXPERIMENTAL."
                },
                "google": {
                  "$ref": "#/definitions/AccountAssociationsGoogle",
                  "description": "google holds information associating a Google project with the group."
                },
                "name": {
                  "description": "name of the association.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamAccountAssociations"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "GroupAccountAssociations"
        ]
      }
    },
    "/iam/v1/account_associations/{group}:check": {
      "post": {
        "operationId": "GroupAccountAssociations_Check",
        "parameters": [
          {
            "description": "group is the exact UIDP of the group whose associations we want to check",
            "in": "path",
            "name": "group",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "accountType": {
                  "$ref": "#/definitions/AccountAssociationsCheckRequestAccountType"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamAccountAssociationsStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "GroupAccountAssociations"
        ]
      }
    },
    "/iam/v1/group_invites": {
      "get": {
        "operationId": "GroupInvites_List",
        "parameters": [
          {
            "description": "group is used to identify the group this record is rooted under.",
            "in": "query",
            "name": "group",
            "required": false,
            "type": "string"
          },
          {
            "description": "id is the exact UID of the record.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "key_id is the identify the verification key for this code.",
            "in": "query",
            "name": "keyId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamGroupInviteList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "GroupInvites"
        ]
      }
    },
    "/iam/v1/group_invites/{group}": {
      "post": {
        "operationId": "GroupInvites_Create",
        "parameters": [
          {
            "description": "group, The Group UIDP path under which the new group Invite targets.",
            "in": "path",
            "name": "group",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "email": {
                  "description": "email is the exact email address that may accept this invite code, if specified.",
                  "type": "string"
                },
                "role": {
                  "description": "role is the Role UIDP the invited identity will be role-bound to the group with.",
                  "type": "string"
                },
                "ttl": {
                  "description": "expiration, timestamp this invite becomes no longer valid.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamGroupInvite"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "GroupInvites"
        ]
      }
    },
    "/iam/v1/group_invites/{id}": {
      "delete": {
        "operationId": "GroupInvites_Delete",
        "parameters": [
          {
            "description": "id is the exact UIDP of the record.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "GroupInvites"
        ]
      }
    },
    "/iam/v1/groups": {
      "get": {
        "operationId": "Groups_List",
        "parameters": [
          {
            "description": "id is the exact UID of the record.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "ancestors_of are groups reachable by repeated proceeding from child to parent.",
            "in": "query",
            "name": "uidp.ancestorsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "descendants_of are groups reachable by repeated proceeding from parent to child.",
            "in": "query",
            "name": "uidp.descendantsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "children_of are groups reachable by directly proceeding from parent to children.",
            "in": "query",
            "name": "uidp.childrenOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "name is the exact name of the record.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamGroupList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Groups"
        ]
      }
    },
    "/iam/v1/groups/{id}": {
      "delete": {
        "operationId": "Groups_Delete",
        "parameters": [
          {
            "description": "id is the exact UIDP of the record.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Groups"
        ]
      },
      "put": {
        "operationId": "Groups_Update",
        "parameters": [
          {
            "description": "id, The group UIDP under which this group resides.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "description": {
                  "description": "description, human readable of group.",
                  "type": "string"
                },
                "name": {
                  "description": "name, human readable name of group.",
                  "type": "string"
                },
                "resourceLimits": {
                  "additionalProperties": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "description": "resource_limits indicate the maximum number of resources allowed for this group by type.",
                  "type": "object"
                },
                "verified": {
                  "title": "verified means we've verified the owners of this organization. Restrictions include:\n- Only organizations (root groups) can be verified\n- Property can only be set by manually by Chainguardians\n- If verified is set, the organizations name field must be globally unique\n- If verified is set the organizations name should be a domain name",
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Groups"
        ]
      }
    },
    "/iam/v1/groups/{parent}": {
      "post": {
        "operationId": "Groups_Create",
        "parameters": [
          {
            "description": "parent, The Group UIDP path under which the new Group resides.\nThis is effectively the iam_scope for Create requests, but because\nwe also allow users to create new \"root\" groups, we check the scoping\nmanually. Parent is allowed to be a prefix of a UIDP of a Group within\nscope, or the name of a Group in scope.",
            "in": "path",
            "name": "parent",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "description": "Group to create.",
            "in": "body",
            "name": "group",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Groups"
        ]
      }
    },
    "/iam/v1/identities": {
      "get": {
        "operationId": "Identities_List",
        "parameters": [
          {
            "description": "ancestors_of are groups reachable by repeated proceeding from child to parent.",
            "in": "query",
            "name": "uidp.ancestorsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "descendants_of are groups reachable by repeated proceeding from parent to child.",
            "in": "query",
            "name": "uidp.descendantsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "children_of are groups reachable by directly proceeding from parent to children.",
            "in": "query",
            "name": "uidp.childrenOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "id is unique identifier to look up.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamIdentityList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Identities"
        ]
      }
    },
    "/iam/v1/identities/lookup": {
      "get": {
        "operationId": "Identities_Lookup",
        "parameters": [
          {
            "description": "issuer is the oidc issuer to look up.",
            "in": "query",
            "name": "issuer",
            "required": false,
            "type": "string"
          },
          {
            "description": "subject is the subject to look up.",
            "in": "query",
            "name": "subject",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamIdentity"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Identities"
        ]
      }
    },
    "/iam/v1/identities/metadata": {
      "patch": {
        "operationId": "Identities_UpdateMetadata",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/eventsIdentityMetadata"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/eventsIdentityMetadata"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Identities"
        ]
      }
    },
    "/iam/v1/identities/{id}": {
      "delete": {
        "operationId": "Identities_Delete",
        "parameters": [
          {
            "description": "ID, UIDP of the record.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Identities"
        ]
      },
      "put": {
        "operationId": "Identities_Update",
        "parameters": [
          {
            "description": "id is unique identifier of this specific identity.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "awsIdentity": {
                  "$ref": "#/definitions/IdentityAWSIdentity",
                  "title": "aws_identity matches AWS IAM users and roles to an identity"
                },
                "claimMatch": {
                  "$ref": "#/definitions/IdentityClaimMatch",
                  "description": "claim_match checks the third party IdP token's claims against one\nor more configured patterns."
                },
                "createdAt": {
                  "description": "created_at is the timestamp for when the identity was created.",
                  "format": "date-time",
                  "type": "string"
                },
                "description": {
                  "description": "description, human readable of identity.",
                  "type": "string"
                },
                "name": {
                  "description": "name, human readable name of identity.",
                  "type": "string"
                },
                "servicePrincipal": {
                  "$ref": "#/definitions/iamServicePrincipal",
                  "description": "service_principal is the name of the Chainguard service that is\nallowed to assume this identity.  These names correlate with the\nservice names used in impersonation with account associations."
                },
                "static": {
                  "$ref": "#/definitions/IdentityStaticKeys",
                  "description": "static is equivalent to literal, but instead of discovering the\nIdP's verification keys we verify the identity using pre-registered\nverification keys.  This is intended for use with identities from\nproviders without an \"online\" issuer (network accessible to our IdP),\nsuch as a KinD/minikube cluster.\nNOTE: because this path does not have a mechanism for key rotation\nthe identity will expire, with a maximum lifetime of 30d."
                },
                "updatedAt": {
                  "description": "updated_at is the timestamp for when the identity was last updated.",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamIdentity"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Identities"
        ]
      }
    },
    "/iam/v1/identities/{parentId}": {
      "post": {
        "operationId": "Identities_Create",
        "parameters": [
          {
            "description": "parent_id, The Group UIDP path under which the new Identity resides.",
            "in": "path",
            "name": "parentId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "description": "Identity to create.",
            "in": "body",
            "name": "identity",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamIdentity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamIdentity"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Identities"
        ]
      }
    },
    "/iam/v1/identityProviders": {
      "get": {
        "operationId": "IdentityProviders_List",
        "parameters": [
          {
            "description": "Exact match on identity provider UIDP",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Exact match on identity provider name",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "ancestors_of are groups reachable by repeated proceeding from child to parent.",
            "in": "query",
            "name": "uidp.ancestorsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "descendants_of are groups reachable by repeated proceeding from parent to child.",
            "in": "query",
            "name": "uidp.descendantsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "children_of are groups reachable by directly proceeding from parent to children.",
            "in": "query",
            "name": "uidp.childrenOf",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamIdentityProviderList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "IdentityProviders"
        ]
      }
    },
    "/iam/v1/identityProviders/{id}": {
      "delete": {
        "operationId": "IdentityProviders_Delete",
        "parameters": [
          {
            "description": "id is the exact UIDP of the IdP",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "IdentityProviders"
        ]
      },
      "put": {
        "operationId": "IdentityProviders_Update",
        "parameters": [
          {
            "description": "id is unique identifier of this specific identity provider",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "defaultRole": {
                  "description": "default_role is the UIDP of an optional default role\nto grant users of this identity provider.",
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "oidc": {
                  "$ref": "#/definitions/IdentityProviderOIDC"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamIdentityProvider"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "IdentityProviders"
        ]
      }
    },
    "/iam/v1/identityProviders/{parentId}": {
      "post": {
        "operationId": "IdentityProviders_Create",
        "parameters": [
          {
            "description": "parent_id is the exact UIDP of the IAM group to nest this identity provider under",
            "in": "path",
            "name": "parentId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "identityProvider",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamIdentityProvider"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamIdentityProvider"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "IdentityProviders"
        ]
      }
    },
    "/iam/v1/policies": {
      "get": {
        "operationId": "Policies_List",
        "parameters": [
          {
            "description": "id is the exact UIDP of the record.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "ancestors_of are groups reachable by repeated proceeding from child to parent.",
            "in": "query",
            "name": "uidp.ancestorsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "descendants_of are groups reachable by repeated proceeding from parent to child.",
            "in": "query",
            "name": "uidp.descendantsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "children_of are groups reachable by directly proceeding from parent to children.",
            "in": "query",
            "name": "uidp.childrenOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "name is the exact name of the record.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamPolicyList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Policies"
        ]
      }
    },
    "/iam/v1/policies/{id}": {
      "delete": {
        "operationId": "Policies_Delete",
        "parameters": [
          {
            "description": "id is the exact UIDP of the record.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Policies"
        ]
      },
      "put": {
        "operationId": "Policies_Update",
        "parameters": [
          {
            "description": "id is identifier of this specific policy.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "createdAt": {
                  "description": "created_at is the timestamp for when the policy was created.",
                  "format": "date-time",
                  "type": "string"
                },
                "description": {
                  "description": "description, human readable description of policy.",
                  "type": "string"
                },
                "document": {
                  "description": "document, YAML encoded policy document.",
                  "type": "string"
                },
                "enforcedVersion": {
                  "$ref": "#/definitions/iamPolicyVersion",
                  "description": "enforced_version contains information about the enforced version of this policy.\nWhen used as a return value, Policy.name, Policy.description, and Policy.document are all copies of\nthe respective fields in enforced_version for backwards compatibility. enforced_version may be empty for\nlegacy policies without versions.\nWhen used for Create or Update, set enforced_version.label to set an optional version label."
                },
                "name": {
                  "description": "name, human readable name of policy.\nThis field is populated from the document and any existing value will be ignored for Create/Update.",
                  "type": "string"
                },
                "updatedAt": {
                  "description": "updated_at is the timestamp when the current version of the policy was last updated.",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamPolicy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Policies"
        ]
      }
    },
    "/iam/v1/policies/{parentId}": {
      "post": {
        "operationId": "Policies_Create",
        "parameters": [
          {
            "description": "parent_id, The Group UIDP path under which the new policy is associated.",
            "in": "path",
            "name": "parentId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "description": "Policy is the policy to create;",
            "in": "body",
            "name": "policy",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamPolicy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Policies"
        ]
      }
    },
    "/iam/v1/policyVersions/{policyId}": {
      "get": {
        "operationId": "Policies_ListVersions",
        "parameters": [
          {
            "description": "policy_id is the identifier of the policy to list versions of.",
            "in": "path",
            "name": "policyId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamPolicyVersionList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Policies"
        ]
      }
    },
    "/iam/v1/policyVersions/{versionId}": {
      "post": {
        "operationId": "Policies_ActivateVersion",
        "parameters": [
          {
            "description": "version_id is the identifier of the policy version to enforce.",
            "in": "path",
            "name": "versionId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamPolicy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Policies"
        ]
      }
    },
    "/iam/v1/rolebindings": {
      "get": {
        "operationId": "RoleBindings_List",
        "parameters": [
          {
            "description": "id is the exact UID of the record.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "ancestors_of are groups reachable by repeated proceeding from child to parent.",
            "in": "query",
            "name": "uidp.ancestorsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "descendants_of are groups reachable by repeated proceeding from parent to child.",
            "in": "query",
            "name": "uidp.descendantsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "children_of are groups reachable by directly proceeding from parent to children.",
            "in": "query",
            "name": "uidp.childrenOf",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamRoleBindingList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "RoleBindings"
        ]
      }
    },
    "/iam/v1/rolebindings/{id}": {
      "delete": {
        "operationId": "RoleBindings_Delete",
        "parameters": [
          {
            "description": "id is the exact UID of the record.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "RoleBindings"
        ]
      },
      "put": {
        "operationId": "RoleBindings_Update",
        "parameters": [
          {
            "description": "id, the UID of this role binding.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "group": {
                  "description": "group, UIDP of the group to bind. This field is ignored and will be removed\nin the future. The group is always the parent of the UIDP.",
                  "type": "string"
                },
                "identity": {
                  "description": "identity, UID of the Identity to bind.",
                  "type": "string"
                },
                "role": {
                  "title": "role, UIDP of the Role to bind",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamRoleBinding"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "RoleBindings"
        ]
      }
    },
    "/iam/v1/rolebindings/{parent}": {
      "post": {
        "operationId": "RoleBindings_Create",
        "parameters": [
          {
            "description": "parent, The Group UIDP path under which the new RoleBinding resides.",
            "in": "path",
            "name": "parent",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "description": "RoleBinding to create.",
            "in": "body",
            "name": "roleBinding",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamRoleBinding"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamRoleBinding"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "RoleBindings"
        ]
      }
    },
    "/iam/v1/roles": {
      "get": {
        "operationId": "Roles_List",
        "parameters": [
          {
            "description": "id is the exact UIDP of the record.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "name is the exact name of the record",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "parent is the exact UIDP of the parent, or / for root",
            "in": "query",
            "name": "parent",
            "required": false,
            "type": "string"
          },
          {
            "description": "ancestors_of are groups reachable by repeated proceeding from child to parent.",
            "in": "query",
            "name": "uidp.ancestorsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "descendants_of are groups reachable by repeated proceeding from parent to child.",
            "in": "query",
            "name": "uidp.descendantsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "children_of are groups reachable by directly proceeding from parent to children.",
            "in": "query",
            "name": "uidp.childrenOf",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamRoleList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Roles"
        ]
      }
    },
    "/iam/v1/roles/{id}": {
      "delete": {
        "operationId": "Roles_Delete",
        "parameters": [
          {
            "description": "id is the exact UIDP of the record.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Roles"
        ]
      },
      "put": {
        "operationId": "Roles_Update",
        "parameters": [
          {
            "description": "id, The Group path under which this Role resides.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "capabilities": {
                  "description": "capabilities, human readable list of capabilities supported by the group.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "description": {
                  "description": "description, human readable description of group.",
                  "type": "string"
                },
                "name": {
                  "description": "name, human readable name of group.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamRole"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Roles"
        ]
      }
    },
    "/iam/v1/roles/{parentId}": {
      "post": {
        "operationId": "Roles_Create",
        "parameters": [
          {
            "description": "parent_id, The Group UIDP path under which the new Role resides.",
            "in": "path",
            "name": "parentId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "description": "Role to create.",
            "in": "body",
            "name": "role",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamRole"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Roles"
        ]
      }
    },
    "/iam/v1/sigstore": {
      "get": {
        "operationId": "SigstoreService_List",
        "parameters": [
          {
            "description": "id is the exact UIDP of the record.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "ancestors_of are groups reachable by repeated proceeding from child to parent.",
            "in": "query",
            "name": "uidp.ancestorsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "descendants_of are groups reachable by repeated proceeding from parent to child.",
            "in": "query",
            "name": "uidp.descendantsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "children_of are groups reachable by directly proceeding from parent to children.",
            "in": "query",
            "name": "uidp.childrenOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "name is the exact name of the record.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamSigstoreList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SigstoreService"
        ]
      }
    },
    "/iam/v1/sigstore/{id}": {
      "delete": {
        "operationId": "SigstoreService_Delete",
        "parameters": [
          {
            "description": "id is the exact UIDP of the record.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SigstoreService"
        ]
      },
      "put": {
        "operationId": "SigstoreService_Update",
        "parameters": [
          {
            "description": "id is identifier of this specific sigstore instance.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "certificateAuthority": {
                  "$ref": "#/definitions/iamCertificateAuthority",
                  "title": "certificate authority for this instance of sigstore"
                },
                "description": {
                  "description": "description, human-readable description of the sigstore instance.",
                  "type": "string"
                },
                "hostname": {
                  "title": "unique hostname of this sigstore instance",
                  "type": "string"
                },
                "name": {
                  "description": "name, human-readable name of the sigstore instance.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamSigstore"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SigstoreService"
        ]
      }
    },
    "/iam/v1/sigstore/{parentId}": {
      "post": {
        "operationId": "SigstoreService_Create",
        "parameters": [
          {
            "description": "parent_id, The Group UIDP path under which the new sigstore instance is associated.",
            "in": "path",
            "name": "parentId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "description": "Sigstore is the sigstore instance to create;",
            "in": "body",
            "name": "sigstore",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamSigstore"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamSigstore"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SigstoreService"
        ]
      }
    },
    "/ping/v1/ping": {
      "get": {
        "operationId": "PingService_Ping",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "PingService"
        ]
      }
    },
    "/registry/v1/repos": {
      "get": {
        "operationId": "Registry_ListRepos",
        "parameters": [
          {
            "description": "ancestors_of are groups reachable by repeated proceeding from child to parent.",
            "in": "query",
            "name": "uidp.ancestorsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "descendants_of are groups reachable by repeated proceeding from parent to child.",
            "in": "query",
            "name": "uidp.descendantsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "children_of are groups reachable by directly proceeding from parent to children.",
            "in": "query",
            "name": "uidp.childrenOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "name is the exact name of the record.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "id is the identifier of this specific repository.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/registryRepoList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      }
    },
    "/registry/v1/repos/{id}": {
      "delete": {
        "operationId": "Registry_DeleteRepo",
        "parameters": [
          {
            "description": "ID, UID of the record.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      },
      "put": {
        "operationId": "Registry_UpdateRepo",
        "parameters": [
          {
            "description": "id is the identifier of this specific repository.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "bundles": {
                  "description": "bundles is a list of tags/labels that allow us to group repositories to each other for sales purposes.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "catalogTier": {
                  "$ref": "#/definitions/registryCatalogTier",
                  "description": "catalog_tier is the catalog tier this repository belongs to."
                },
                "name": {
                  "description": "name is the human-readable name of the repository.",
                  "type": "string"
                },
                "readme": {
                  "description": "readme is raw Markdown file contents describing the repo.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/registryRepo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      }
    },
    "/registry/v1/repos/{parentId}": {
      "post": {
        "operationId": "Registry_CreateRepo",
        "parameters": [
          {
            "in": "path",
            "name": "parentId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "repo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/registryRepo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/registryRepo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      }
    },
    "/registry/v1/repos/{repoId}/diff": {
      "get": {
        "operationId": "Registry_DiffImage",
        "parameters": [
          {
            "description": "The UIDP of the image repo to diff against.",
            "in": "path",
            "name": "repoId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "fromDigest",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "toDigest",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/registryDiffImageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      }
    },
    "/registry/v1/repos/{repoId}/digests/{digest}/sbom": {
      "get": {
        "operationId": "Registry_GetSbom",
        "parameters": [
          {
            "description": "The UIDP of the image repo to get an SBOM for.",
            "in": "path",
            "name": "repoId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The digest of the image to get an SBOM for.",
            "in": "path",
            "name": "digest",
            "pattern": "[^/]+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tenantSbom2"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      }
    },
    "/registry/v1/repos/{repoId}/digests/{digest}/vulnreport": {
      "get": {
        "operationId": "Registry_GetVulnReport",
        "parameters": [
          {
            "description": "The UIDP of the image repo to get a VulnReport for.",
            "in": "path",
            "name": "repoId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The digest of the image to get a VulnReport for.",
            "in": "path",
            "name": "digest",
            "pattern": "[^/]+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tenantVulnReport"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      }
    },
    "/registry/v1/tags": {
      "get": {
        "operationId": "Registry_ListTags",
        "parameters": [
          {
            "description": "ancestors_of are groups reachable by repeated proceeding from child to parent.",
            "in": "query",
            "name": "uidp.ancestorsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "descendants_of are groups reachable by repeated proceeding from parent to child.",
            "in": "query",
            "name": "uidp.descendantsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "children_of are groups reachable by directly proceeding from parent to children.",
            "in": "query",
            "name": "uidp.childrenOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "The unique name of the Tag to list.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "The timestamp after which returned records were updated.",
            "format": "date-time",
            "in": "query",
            "name": "updatedSince",
            "required": false,
            "type": "string"
          },
          {
            "description": "Exclude tags of the form \"sha256-*\".",
            "in": "query",
            "name": "excludeReferrers",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Exclude tags of the form \"*-20yymmdd\".",
            "in": "query",
            "name": "excludeDates",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Exclude tags of the form \"*-r[0-9]+\".",
            "in": "query",
            "name": "excludeEpochs",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/registryTagList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      }
    },
    "/registry/v1/tags/{id}": {
      "delete": {
        "operationId": "Registry_DeleteTag",
        "parameters": [
          {
            "description": "ID, UID of the record.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      },
      "put": {
        "operationId": "Registry_UpdateTag",
        "parameters": [
          {
            "description": "id, identifier of this Tag, a UIDP under a Repo.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "bundles": {
                  "description": "bundles is a list of tags/labels for sales purposes.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "deprecated": {
                  "description": "deprecated, true if the tag is deprecated.",
                  "type": "boolean"
                },
                "digest": {
                  "description": "digest, the digest of the manifest with this tag.",
                  "type": "string"
                },
                "lastUpdated": {
                  "description": "last time this tag was updated.",
                  "format": "date-time",
                  "type": "string"
                },
                "name": {
                  "description": "name, the unique name of the Tag.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/registryTag"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      }
    },
    "/registry/v1/tags/{parentId}/history": {
      "get": {
        "operationId": "Registry_ListTagHistory",
        "parameters": [
          {
            "description": "tag UIDP to list history for.",
            "in": "path",
            "name": "parentId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "format": "date-time",
            "in": "query",
            "name": "start",
            "required": false,
            "type": "string"
          },
          {
            "format": "date-time",
            "in": "query",
            "name": "end",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/registryTagHistoryList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      }
    },
    "/registry/v1/tags/{repoId}": {
      "post": {
        "operationId": "Registry_CreateTag",
        "parameters": [
          {
            "in": "path",
            "name": "repoId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "tag",
            "required": true,
            "schema": {
              "$ref": "#/definitions/registryTag"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/registryTag"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      }
    },
    "/sts/exchange": {
      "get": {
        "operationId": "SecurityTokenService_Exchange2",
        "parameters": [
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "aud",
            "required": false,
            "type": "array"
          },
          {
            "in": "query",
            "name": "scope",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "cluster",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "identity",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "List of capabilities to request for the token.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "cap",
            "required": false,
            "type": "array"
          },
          {
            "description": "Whether or not to include the upstream token in the response",
            "in": "query",
            "name": "includeUpstreamToken",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/oidcRawToken"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SecurityTokenService"
        ]
      },
      "post": {
        "operationId": "SecurityTokenService_Exchange",
        "parameters": [
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "aud",
            "required": false,
            "type": "array"
          },
          {
            "in": "query",
            "name": "scope",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "cluster",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "identity",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "List of capabilities to request for the token.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "cap",
            "required": false,
            "type": "array"
          },
          {
            "description": "Whether or not to include the upstream token in the response",
            "in": "query",
            "name": "includeUpstreamToken",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/oidcRawToken"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SecurityTokenService"
        ]
      }
    },
    "/sts/exchange_refresh_token": {
      "post": {
        "operationId": "SecurityTokenService_ExchangeRefreshToken",
        "parameters": [
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "aud",
            "required": false,
            "type": "array"
          },
          {
            "in": "query",
            "name": "scope",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "List of capabilities to request for the token.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "cap",
            "required": false,
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/oidcTokenPair"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SecurityTokenService"
        ]
      }
    },
    "/tenant/v1/clusters": {
      "get": {
        "operationId": "Clusters_List",
        "parameters": [
          {
            "description": "id is the exact UID of the record.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "active_since is the timestamp after which returned clusters should have been active.\nThis applies to both cluster registration and when it was \"last seen\".",
            "format": "date-time",
            "in": "query",
            "name": "activeSince",
            "required": false,
            "type": "string"
          },
          {
            "description": "ancestors_of are groups reachable by repeated proceeding from child to parent.",
            "in": "query",
            "name": "uidp.ancestorsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "descendants_of are groups reachable by repeated proceeding from parent to child.",
            "in": "query",
            "name": "uidp.descendantsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "children_of are groups reachable by directly proceeding from parent to children.",
            "in": "query",
            "name": "uidp.childrenOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "remote_id is the remote ID of this cluster.",
            "in": "query",
            "name": "remoteId",
            "required": false,
            "type": "string"
          },
          {
            "description": "name is the exact name of the cluster.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tenantClusterList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "Clusters"
        ]
      },
      "post": {
        "operationId": "Clusters_Discover",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tenantClusterDiscoveryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tenantClusterDiscoveryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "Clusters"
        ]
      }
    },
    "/tenant/v1/clusters/{cluster}/records": {
      "get": {
        "operationId": "Records_List",
        "parameters": [
          {
            "description": "cluster is specified if restricting to a given cluster id.\nThis field is required.",
            "in": "path",
            "name": "cluster",
            "required": true,
            "type": "string"
          },
          {
            "description": "id is the exact UID of the record.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "ancestors_of are groups reachable by repeated proceeding from child to parent.",
            "in": "query",
            "name": "uidp.ancestorsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "descendants_of are groups reachable by repeated proceeding from parent to child.",
            "in": "query",
            "name": "uidp.descendantsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "children_of are groups reachable by directly proceeding from parent to children.",
            "in": "query",
            "name": "uidp.childrenOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "image is specified if a specific Record is desired.",
            "in": "query",
            "name": "image",
            "required": false,
            "type": "string"
          },
          {
            "description": "predicate specifies to fetch Records where either there's no\nLastRefreshed for this predicate type, or if it needs to be refreshed.",
            "in": "query",
            "name": "predicate",
            "required": false,
            "type": "string"
          },
          {
            "description": "active_since is the timestamp after which returned records should have been active.\nThis applies to when an image was \"last seen\".",
            "format": "date-time",
            "in": "query",
            "name": "activeSince",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tenantRecordList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Records"
        ]
      }
    },
    "/tenant/v1/clusters/{id}": {
      "delete": {
        "operationId": "Clusters_Delete",
        "parameters": [
          {
            "description": "id is the exact UIDP of the record.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "Clusters"
        ]
      },
      "put": {
        "operationId": "Clusters_Update",
        "parameters": [
          {
            "description": "id, The Cluster UIDP under which this Cluster resides.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "activity": {
                  "additionalProperties": {
                    "$ref": "#/definitions/tenantClusterActivity"
                  },
                  "description": "activity is a mapping from \"Source\" URLs to an activity record summarizing\nrecent activity from this source.",
                  "type": "object"
                },
                "affinity": {
                  "$ref": "#/definitions/tenantClusterLocation",
                  "description": "affinity specifies a scheduling preference for where to run the managed agent.\nOther factors, such as the provider may be taken into account when choosing a\nhost cluster."
                },
                "agentVersion": {
                  "description": "agent_version holds the version of the Chainguard agent last reported by the cluster.",
                  "type": "string"
                },
                "authInfo": {
                  "$ref": "#/definitions/ClusterAuthInfo",
                  "description": "auth_info holds authentication details for connecting to KinD in test scenarios."
                },
                "description": {
                  "description": "a short description of this cluster.",
                  "type": "string"
                },
                "enforcerOptions": {
                  "$ref": "#/definitions/tenantClusterEnforcerOptions",
                  "title": "EnforcerOptions contains additional Enforcer configuration settings.\n+optional"
                },
                "group": {
                  "$ref": "#/definitions/iamGroup",
                  "title": "group the cluster resides in"
                },
                "hostCluster": {
                  "description": "host_cluster surfaces the opaque identifier for the Chainguard cluster hosting\nthis agent.",
                  "type": "string"
                },
                "info": {
                  "$ref": "#/definitions/ClusterInfo",
                  "description": "info contains the cluster information from the kubeconfig context."
                },
                "issuer": {
                  "description": "issuer is the identity issuer tied to this cluster.",
                  "type": "string"
                },
                "lastSeen": {
                  "description": "last_seen tracks the timestamp at which this cluster was last seen.",
                  "format": "date-time",
                  "type": "string"
                },
                "managedName": {
                  "description": "managed_name is the unique name we have given to this cluster's managed agent.\nThis field is output-only, and is populated only when this cluster is \"managed\".",
                  "type": "string"
                },
                "name": {
                  "description": "name of the cluster.",
                  "type": "string"
                },
                "profiles": {
                  "description": "profiles specifies the root set of tenant configurations that we want to run\non this cluster.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "provider": {
                  "$ref": "#/definitions/ClusterProvider",
                  "description": "provider holds the flavor of cluster provider, which is used to determine how we\nauthenticate with the cluster."
                },
                "registered": {
                  "description": "registered tracks the timestamp at which this cluster was registered.",
                  "format": "date-time",
                  "type": "string"
                },
                "remoteId": {
                  "description": "remote_id is the remote ID of this cluster.",
                  "type": "string"
                },
                "status": {
                  "$ref": "#/definitions/tenantClusterStatus",
                  "description": "status contains the managed cluster's status."
                },
                "version": {
                  "description": "version holds the Kubernetes version last reported by the cluster.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tenantCluster"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "Clusters"
        ]
      }
    },
    "/tenant/v1/clusters/{parentId}": {
      "post": {
        "operationId": "Clusters_Create",
        "parameters": [
          {
            "description": "parent_id, The Group under which this Cluster resides.",
            "in": "path",
            "name": "parentId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "description": "Cluster is the definition of the managed cluster to create.",
            "in": "body",
            "name": "cluster",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tenantCluster"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tenantCluster"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "Clusters"
        ]
      }
    },
    "/tenant/v1/risks": {
      "get": {
        "operationId": "Risks_List",
        "parameters": [
          {
            "description": "id is the exact UID of the record.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "ancestors_of are groups reachable by repeated proceeding from child to parent.",
            "in": "query",
            "name": "uidp.ancestorsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "descendants_of are groups reachable by repeated proceeding from parent to child.",
            "in": "query",
            "name": "uidp.descendantsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "children_of are groups reachable by directly proceeding from parent to children.",
            "in": "query",
            "name": "uidp.childrenOf",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tenantRiskList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Risks"
        ]
      }
    },
    "/tenant/v1/vulnreports": {
      "get": {
        "operationId": "VulnReports_List",
        "parameters": [
          {
            "description": "id is the exact UID of the record.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "ancestors_of are groups reachable by repeated proceeding from child to parent.",
            "in": "query",
            "name": "uidp.ancestorsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "descendants_of are groups reachable by repeated proceeding from parent to child.",
            "in": "query",
            "name": "uidp.descendantsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "children_of are groups reachable by directly proceeding from parent to children.",
            "in": "query",
            "name": "uidp.childrenOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "active_since is the timestamp after which the records should\nhave last been observed in the returned context.",
            "format": "date-time",
            "in": "query",
            "name": "activeSince",
            "required": false,
            "type": "string"
          },
          {
            "description": "include_raw_vuln_report is a flag to return a list of reports containing the raw report.",
            "in": "query",
            "name": "includeRawVulnReport",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tenantVulnReportList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "VulnReports"
        ]
      }
    }
  },
  "definitions": {
    "AccountAssociationsAmazon": {
      "properties": {
        "account": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AccountAssociationsChainguard": {
      "properties": {
        "serviceBindings": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "service_bindings map from the Chainguard service principal to the\nUIDP of the identity that service should assume. Constraints:\n- The identity must live directly under \"group\",\n- The identity must be a service_principal,\n- The service_principal of the identity must match the key of this map.\nNote that the key space of this must match the ServicePrincipal enum,\nbut the enum type itself cannot be used here because of:\nhttps://groups.google.com/g/protobuf/c/ikeldBe60eI",
          "type": "object"
        }
      },
      "type": "object"
    },
    "AccountAssociationsCheckRequestAccountType": {
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "GOOGLE",
        "AMAZON"
      ],
      "type": "string"
    },
    "AccountAssociationsGitHubInstallation": {
      "properties": {
        "appId": {
          "description": "GitHub App ID. Output only.",
          "format": "int64",
          "readOnly": true,
          "type": "string"
        },
        "host": {
          "description": "GitHub hostname app is associated with. Output only.",
          "readOnly": true,
          "type": "string"
        },
        "installationId": {
          "description": "GitHub App Installation ID. Takes precedence over name.",
          "format": "int64",
          "type": "string"
        },
        "name": {
          "description": "GitHub user/org name the installation is installed on.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AccountAssociationsGoogle": {
      "properties": {
        "projectId": {
          "type": "string"
        },
        "projectNumber": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AccountAssociationsStatusState": {
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "Ready",
        "NotReady"
      ],
      "type": "string"
    },
    "ChangedImageConfigChangedStopSignal": {
      "properties": {
        "current": {
          "type": "string"
        },
        "previous": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ChangedImageConfigChangedUser": {
      "properties": {
        "current": {
          "type": "string"
        },
        "previous": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ChangedImageConfigChangedWorkingDir": {
      "properties": {
        "current": {
          "type": "string"
        },
        "previous": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ChangedImageConfigCmdDiff": {
      "properties": {
        "added": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "removed": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ChangedImageConfigEntrypointDiff": {
      "properties": {
        "added": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "removed": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ChangedImageConfigEnvDiff": {
      "properties": {
        "added": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "removed": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ChangedImageConfigVolume": {
      "type": "object"
    },
    "ChangedImageConfigVolumeDiff": {
      "properties": {
        "added": {
          "additionalProperties": {
            "$ref": "#/definitions/ChangedImageConfigVolume"
          },
          "type": "object"
        },
        "removed": {
          "additionalProperties": {
            "$ref": "#/definitions/ChangedImageConfigVolume"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "ClusterAuthInfo": {
      "description": "This is based off of k8s.io/client-go/tools/clientcmd/api/v1.AuthInfo\nThis should only ever be used with KinD clusters during testing, it WILL\nNOT be stored securely.",
      "properties": {
        "clientCertificateData": {
          "description": "client_certificate_data contains PEM-encoded data from a client cert file for TLS.",
          "format": "byte",
          "type": "string"
        },
        "clientKeyData": {
          "description": "client_key_data contains PEM-encoded data from a client key file for TLS.",
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ClusterDiscoveryResponseResult": {
      "properties": {
        "account": {
          "type": "string"
        },
        "eligible": {
          "$ref": "#/definitions/ResultEligible",
          "description": "eligible clusters are able to be directly enrolled as\nagentless tenants immediately.  This message contains\nall of the information needed to enroll this cluster."
        },
        "enrolled": {
          "$ref": "#/definitions/ResultEnrolled",
          "description": "enrolled clusters are clusters that have already been\nenrolled as agentless tenants."
        },
        "location": {
          "$ref": "#/definitions/tenantClusterLocation"
        },
        "name": {
          "type": "string"
        },
        "needsWork": {
          "$ref": "#/definitions/ResultNeedsWork",
          "description": "needs_work clusters can be modified in some way so\nthat they are supported by our Agentless infrastructure."
        },
        "provider": {
          "$ref": "#/definitions/ClusterProvider"
        },
        "unsupported": {
          "$ref": "#/definitions/ResultUnsupported",
          "description": "unsupported clusters cannot be enrolled with our\nAgentless cluster support."
        }
      },
      "type": "object"
    },
    "ClusterInfo": {
      "properties": {
        "CertificateAuthorityData": {
          "format": "byte",
          "title": "CertificateAuthorityData contains PEM-encoded certificate authority certificates.\nOverrides CertificateAuthority",
          "type": "string"
        },
        "server": {
          "description": "Server is the address of the kubernetes cluster (https://hostname:port).",
          "type": "string"
        }
      },
      "title": "This is based off of k8s.io/client-go/tools/clientcmd/api/v1.Cluster\nThis can be extracted from kubectl for a named cluster (replace CLUSTER_NAME) with:\n  kubectl config view \\\n    --flatten -o jsonpath='{.clusters[?(@.name == \"CLUSTER_NAME\")].cluster}'",
      "type": "object"
    },
    "ClusterProfilesResponseProfile": {
      "properties": {
        "dependencies": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ClusterProvider": {
      "default": "UNKNOWN",
      "description": " - CLOUD_RUN: GCP Services (10+)\n - ECS: AWS Services (20+)\n - KIND: For testing.",
      "enum": [
        "UNKNOWN",
        "GKE",
        "EKS",
        "CLOUD_RUN",
        "ECS",
        "APP_RUNNER",
        "KIND"
      ],
      "type": "string"
    },
    "ClusterStatusState": {
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "Ready",
        "NotReady"
      ],
      "type": "string"
    },
    "ComponentGraphEdge": {
      "properties": {
        "predicateId": {
          "type": "string"
        },
        "subjectId": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/ComponentGraphEdgeType"
        }
      },
      "type": "object"
    },
    "ComponentGraphEdgeType": {
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "DESCRIBES",
        "CONTAINS",
        "DEPENDS_ON",
        "GENERATED_FROM"
      ],
      "type": "string"
    },
    "ComponentGraphNode": {
      "properties": {
        "file": {
          "$ref": "#/definitions/tenantFile2"
        },
        "package": {
          "$ref": "#/definitions/tenantPackage2"
        }
      },
      "type": "object"
    },
    "DetectionDetectionTypeManual": {
      "type": "object"
    },
    "DetectionDetectionTypeNVDAPI": {
      "properties": {
        "cpeFound": {
          "type": "string"
        },
        "cpeSearched": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "FixState": {
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "FIXED",
        "NOT_FIXED",
        "WONT_FIX"
      ],
      "type": "string"
    },
    "IdentityAWSIdentity": {
      "properties": {
        "arn": {
          "title": "Exact match to Arn of AWS Identity",
          "type": "string"
        },
        "arnPattern": {
          "title": "Regular expression for matching Arn",
          "type": "string"
        },
        "awsAccount": {
          "title": "Required, matches the `Account` field in the GetCallerID AWS IAM\nresponse",
          "type": "string"
        },
        "userId": {
          "title": "Exacty match of the UserID field",
          "type": "string"
        },
        "userIdPattern": {
          "title": "Regular expression for UserId field",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IdentityClaimMatch": {
      "properties": {
        "audience": {
          "description": "audience of OIDC ID tokens issued for this identity.",
          "type": "string"
        },
        "audiencePattern": {
          "description": "audience_pattern is a regular expression for matching the\ntoken's audience claim.",
          "type": "string"
        },
        "claimPatterns": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "claim_patterns is a mapping from the name of a custom claim\nto a regular expression for matching that claim's value.",
          "type": "object"
        },
        "claims": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "claims is a mapping from the name of a custom claim\nto a literal matching that claim's value.",
          "type": "object"
        },
        "issuer": {
          "description": "issuer of the OIDC ID tokens issued for this identity.",
          "type": "string"
        },
        "issuerPattern": {
          "description": "issuer_pattern is a regular expression for matching the\ntoken's issuer claim.",
          "type": "string"
        },
        "subject": {
          "description": "subject of OIDC ID tokens issued for this identity.",
          "type": "string"
        },
        "subjectPattern": {
          "description": "subject_pattern is a regular expression for matching the\ntoken's subject claim.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IdentityMetadataOnboardingQuestions": {
      "properties": {
        "companyName": {
          "type": "string"
        },
        "product": {
          "type": "string"
        },
        "providers": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "IdentityProviderOIDC": {
      "properties": {
        "additionalScopes": {
          "items": {
            "type": "string"
          },
          "title": "Additional scopes to request for ID tokens",
          "type": "array"
        },
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "issuer": {
          "title": "Issuer URL (e.g https://accounts.google.com)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IdentityStaticKeys": {
      "properties": {
        "expiration": {
          "description": "expiration is the time when the issuer_keys will expire.\nDefaults to / Maximum of 30 days after creation time.",
          "format": "date-time",
          "type": "string"
        },
        "issuer": {
          "description": "issuer of the OIDC ID tokens issued for this identity.\nMatches the `iss` claim.",
          "type": "string"
        },
        "issuerKeys": {
          "description": "issuer_keys is JWKS-formatted public keys for the issuer.\nRequired, otherwise use Literal.",
          "type": "string"
        },
        "subject": {
          "description": "subject of OIDC ID tokens issued for this identity.\nMatches the `sub` claim.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PackagesDiffChangedPackageReference": {
      "properties": {
        "current": {
          "$ref": "#/definitions/registryVersionReference"
        },
        "name": {
          "type": "string"
        },
        "previous": {
          "$ref": "#/definitions/registryVersionReference"
        }
      },
      "type": "object"
    },
    "RecommendationReplaceArtifact": {
      "properties": {
        "from": {
          "type": "string"
        },
        "to": {
          "description": "Target artifact that may be able to resolve this Risk.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RecordStatusResult": {
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "PASS",
        "FAIL"
      ],
      "type": "string"
    },
    "ResultEligible": {
      "properties": {
        "info": {
          "$ref": "#/definitions/ClusterInfo"
        }
      },
      "type": "object"
    },
    "ResultEnrolled": {
      "properties": {
        "id": {
          "description": "id is the UIDP of the tenant Cluster.",
          "type": "string"
        },
        "info": {
          "$ref": "#/definitions/ClusterInfo"
        },
        "profiles": {
          "description": "profiles contains the set of profiles that this\ncluster was enrolled with.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResultNeedsWork": {
      "properties": {
        "steps": {
          "description": "steps holds the set of changes the user needs to make in order\nfor the cluster to become eligible.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResultUnsupported": {
      "properties": {
        "reason": {
          "description": "reason holds the reason the cluster is not currently supported.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RiskDetails": {
      "properties": {
        "missingData": {
          "$ref": "#/definitions/RiskMissingData"
        }
      },
      "type": "object"
    },
    "RiskMissingData": {
      "properties": {
        "type": {
          "$ref": "#/definitions/RiskMissingDataType",
          "title": "What kind of data is missing (e.g. signature, sbom, policy, etc.)"
        }
      },
      "type": "object"
    },
    "RiskMissingDataType": {
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "SIGNATURE",
        "SBOM",
        "POLICY"
      ],
      "type": "string"
    },
    "RoleBindingListBinding": {
      "properties": {
        "claimMatchIssuer": {
          "description": "ClaimMatch issuer of the bound identity.",
          "type": "string"
        },
        "claimMatchSubject": {
          "description": "ClaimMatch subject of the bound identity.",
          "type": "string"
        },
        "email": {
          "description": "email of the bound identity.",
          "type": "string"
        },
        "group": {
          "$ref": "#/definitions/iamGroup",
          "description": "group of the bound role."
        },
        "id": {
          "description": "id, the UID of this role binding.",
          "type": "string"
        },
        "identity": {
          "description": "identity, UID of the Identity bound.",
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/iamRole",
          "description": "role of the bound identity."
        }
      },
      "type": "object"
    },
    "Sbom2Source": {
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "INGESTED",
        "GENERATED"
      ],
      "title": "Type",
      "type": "string"
    },
    "VulnerabilityRecordCvss": {
      "properties": {
        "score": {
          "description": "CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.",
          "type": "string"
        },
        "version": {
          "description": "CVSS version used to populate score and severity.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "VulnerabilityRecordRelatedVulnerability": {
      "properties": {
        "id": {
          "description": "ID of the vulnerability.",
          "type": "string"
        },
        "source": {
          "description": "Source from where the vulnerability information was obtained, e.g. nvd, github, osv.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "VulnerabilityRecordSeverity": {
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "LOW",
        "MEDIUM",
        "HIGH",
        "CRITICAL"
      ],
      "type": "string"
    },
    "advisoryAdvisory": {
      "properties": {
        "aliases": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "events": {
          "items": {
            "$ref": "#/definitions/advisoryEvent"
          },
          "type": "array"
        },
        "id": {
          "description": "id is the identifier of this specific advisory.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "advisoryAnalysisNotPlanned": {
      "properties": {
        "note": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "advisoryDetection": {
      "properties": {
        "manual": {
          "$ref": "#/definitions/DetectionDetectionTypeManual"
        },
        "nvdapi": {
          "$ref": "#/definitions/DetectionDetectionTypeNVDAPI"
        }
      },
      "type": "object"
    },
    "advisoryDocument": {
      "properties": {
        "advisories": {
          "items": {
            "$ref": "#/definitions/advisoryAdvisory"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "advisoryDocumentList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/advisoryDocument"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "advisoryEvent": {
      "properties": {
        "analysisNotPlanned": {
          "$ref": "#/definitions/advisoryAnalysisNotPlanned"
        },
        "detection": {
          "$ref": "#/definitions/advisoryDetection"
        },
        "falsePositiveDetermination": {
          "$ref": "#/definitions/advisoryFalsePositiveDetermination"
        },
        "fixNotPlanned": {
          "$ref": "#/definitions/advisoryFixNotPlanned"
        },
        "fixed": {
          "$ref": "#/definitions/advisoryFixed"
        },
        "pendingUpstreamFix": {
          "$ref": "#/definitions/advisoryPendingUpstreamFix"
        },
        "timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "truePositiveDetermination": {
          "$ref": "#/definitions/advisoryTruePositiveDetermination"
        }
      },
      "type": "object"
    },
    "advisoryFalsePositiveDetermination": {
      "properties": {
        "note": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/advisoryFalsePositiveDeterminationType"
        }
      },
      "type": "object"
    },
    "advisoryFalsePositiveDeterminationType": {
      "default": "FPT_TYPE_UNSPECIFIED",
      "description": " - FPT_TYPE_UNSPECIFIED: The \"unset\" value.\n - FPT_TYPE_VULNERABILITY_RECORD_ANALYSIS_CONTESTED: VEX: vulnerable_code_not_present.\n - FPT_TYPE_COMPONENT_VULNERABILITY_MISMATCH: VEX: component_not_present.\n - FPT_TYPE_VULNERABLE_CODE_VERSION_NOT_USED: VEX: vulnerable_code_not_present.\n - FPT_TYPE_VULNERABLE_CODE_NOT_INCLUDED_IN_PACKAGE: VEX: vulnerable_code_not_present.\n - FPT_TYPE_VULNERABLE_CODE_NOT_IN_EXECUTION_PATH: VEX: vulnerable_code_not_in_execute_path.\n - FPT_TYPE_VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY: VEX: vulnerable_code_cannot_be_controlled_by_adversary.\n - FPT_TYPE_INLINE_MITIGATIONS_EXIST: VEX: inline_mitigations_already_exist.",
      "enum": [
        "FPT_TYPE_UNSPECIFIED",
        "FPT_TYPE_VULNERABILITY_RECORD_ANALYSIS_CONTESTED",
        "FPT_TYPE_COMPONENT_VULNERABILITY_MISMATCH",
        "FPT_TYPE_VULNERABLE_CODE_VERSION_NOT_USED",
        "FPT_TYPE_VULNERABLE_CODE_NOT_INCLUDED_IN_PACKAGE",
        "FPT_TYPE_VULNERABLE_CODE_NOT_IN_EXECUTION_PATH",
        "FPT_TYPE_VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY",
        "FPT_TYPE_INLINE_MITIGATIONS_EXIST"
      ],
      "type": "string"
    },
    "advisoryFixNotPlanned": {
      "properties": {
        "note": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "advisoryFixed": {
      "properties": {
        "fixedVersion": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "advisoryPendingUpstreamFix": {
      "properties": {
        "note": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "advisoryReference": {
      "properties": {
        "type": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "advisorySeverity": {
      "properties": {
        "score": {
          "description": "Vector string representing CVSS score based on type.",
          "type": "string"
        },
        "type": {
          "description": "CVSS version standard.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "advisoryTruePositiveDetermination": {
      "properties": {
        "note": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "advisoryVulnerabilityMetadata": {
      "properties": {
        "details": {
          "type": "string"
        },
        "id": {
          "description": "id is the identifier of this specific vuln.",
          "type": "string"
        },
        "references": {
          "items": {
            "$ref": "#/definitions/advisoryReference"
          },
          "type": "array"
        },
        "severity": {
          "items": {
            "$ref": "#/definitions/advisorySeverity"
          },
          "type": "array"
        },
        "summary": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "advisoryVulnerabilityMetadataList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/advisoryVulnerabilityMetadata"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "authRegistrationRequest": {
      "properties": {
        "clusterDescription": {
          "description": "cluster_description is an optional description to give the cluster\nwhen one is registered as part of the registration flow.",
          "type": "string"
        },
        "clusterId": {
          "description": "cluster_id is an optional cluster id, which simultaneously registers\na Cluster with the Identity.  This path must specify an invite code, so\nwe know where in the IAM hierarchy to link the cluster.",
          "type": "string"
        },
        "clusterName": {
          "description": "cluster_name is an optional name to give the cluster when one is\nregistered as part of the registration flow.",
          "type": "string"
        },
        "code": {
          "title": "code is an optional encoded invite code, which allows us to register\nthe caller's identity as a member of a particular group as a particular\nrole.\n+optional",
          "type": "string"
        },
        "enforcerOptions": {
          "$ref": "#/definitions/tenantClusterEnforcerOptions",
          "description": "enforcer_options defines the enforcer options."
        },
        "identityId": {
          "title": "identity_id is an optional identity id. If the user already exists, this\nby-passes identity registration and continues on to cluster registration\n(if applicable)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "authSession": {
      "properties": {
        "group": {
          "description": "group, the group this identity has joined by invitation, when an invite\ncode was supplied.",
          "type": "string"
        },
        "identity": {
          "description": "identity, the Chainguard identity id.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "authWhoAmI": {
      "properties": {
        "audience": {
          "description": "Audience is who the token is intended for.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "capabilities": {
          "description": "The capabilities referenced in the token.",
          "items": {
            "$ref": "#/definitions/authWhoAmICapability"
          },
          "type": "array"
        },
        "email": {
          "description": "The upstream email for this token.",
          "type": "string"
        },
        "expiry": {
          "description": "When the token expires.",
          "format": "date-time",
          "type": "string"
        },
        "issuedAt": {
          "description": "With the token was issued.",
          "format": "date-time",
          "type": "string"
        },
        "issuer": {
          "description": "Issuer is the issuer of the token.",
          "type": "string"
        },
        "subject": {
          "description": "The subject of the token.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "authWhoAmICapability": {
      "properties": {
        "group": {
          "$ref": "#/definitions/iamGroup",
          "description": "group of the bound role."
        },
        "role": {
          "$ref": "#/definitions/iamRole",
          "description": "role of the bound identity."
        }
      },
      "title": "--- Upstream fields ---",
      "type": "object"
    },
    "commonUIDPFilter": {
      "properties": {
        "ancestorsOf": {
          "description": "ancestors_of are groups reachable by repeated proceeding from child to parent.",
          "type": "string"
        },
        "childrenOf": {
          "description": "children_of are groups reachable by directly proceeding from parent to children.",
          "type": "string"
        },
        "descendantsOf": {
          "description": "descendants_of are groups reachable by repeated proceeding from parent to child.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "eventsIdentity": {
      "properties": {
        "expiration": {
          "description": "Expiration of identity / issuer keys. After this date /time the issuer\nkeys will not be trusted. Defaults / maximum of 30 days after creation\ntime.",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "id is unique identifier of this specific identity.",
          "type": "string"
        },
        "issuer": {
          "description": "issuer of the OIDC ID tokens issued for this identity. Matches the `iss`\nclaim.",
          "type": "string"
        },
        "issuerKeys": {
          "description": "Optional JWKS formatted public keys for the issuer. If supplied\nverification of ID tokens is attempted using these keys instead of the\nnormal OIDC discovery path. This enables e.g clusters behing NAT to\nauthenticate.",
          "type": "string"
        },
        "subject": {
          "description": "subject of OIDC ID tokens issued for this identity. Matchs the `sub`\nclaim.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "eventsIdentityMetadata": {
      "properties": {
        "name": {
          "description": "Output only. This is the name of the user.",
          "readOnly": true,
          "type": "string"
        },
        "onboardingQuestions": {
          "$ref": "#/definitions/IdentityMetadataOnboardingQuestions"
        },
        "updatesOptIn": {
          "description": "Whether the user has opted to receive updates from Chainguard.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "eventsSubscription": {
      "properties": {
        "id": {
          "description": "id is identifier of this specific subscription.",
          "type": "string"
        },
        "sink": {
          "description": "sink is the address to which events shall be delivered using the selected protocol.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "eventsSubscriptionList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/eventsSubscription"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "googlerpcStatus": {
      "properties": {
        "code": {
          "format": "int32",
          "type": "integer"
        },
        "details": {
          "items": {
            "$ref": "#/definitions/protobufAny"
          },
          "type": "array"
        },
        "message": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "iamAccountAssociations": {
      "properties": {
        "amazon": {
          "$ref": "#/definitions/AccountAssociationsAmazon",
          "description": "amazon holds information associating an Amazon account with the group."
        },
        "chainguard": {
          "$ref": "#/definitions/AccountAssociationsChainguard"
        },
        "description": {
          "description": "a short description of this association.",
          "type": "string"
        },
        "github": {
          "$ref": "#/definitions/AccountAssociationsGitHubInstallation",
          "description": "github holds information associating a GitHub installation with the group.\nNote: this AccountAssociation type is EXPERIMENTAL."
        },
        "google": {
          "$ref": "#/definitions/AccountAssociationsGoogle",
          "description": "google holds information associating a Google project with the group."
        },
        "group": {
          "description": "group is the group with which this account information is associated.",
          "type": "string"
        },
        "name": {
          "description": "name of the association.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "iamAccountAssociationsList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/iamAccountAssociations"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "iamAccountAssociationsStatus": {
      "properties": {
        "message": {
          "type": "string"
        },
        "ready": {
          "$ref": "#/definitions/AccountAssociationsStatusState"
        },
        "reason": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "iamCertificateAuthority": {
      "properties": {
        "googleCa": {
          "$ref": "#/definitions/iamGoogleCA",
          "title": "google_ca is the Google Certificate Authority service"
        },
        "kmsCa": {
          "$ref": "#/definitions/iamKMSCA",
          "title": "kmsca is a KMS-based CA that requires a root cert and KMS signing key"
        }
      },
      "type": "object"
    },
    "iamGoogleCA": {
      "properties": {
        "ref": {
          "title": "ref is a unique reference to the Google CA service in the format\nprojects/\u003cproject\u003e/locations/\u003clocation\u003e/\u003cname\u003e",
          "type": "string"
        }
      },
      "type": "object"
    },
    "iamGroup": {
      "properties": {
        "description": {
          "description": "description, human readable of group.",
          "type": "string"
        },
        "id": {
          "description": "id, The group UIDP under which this group resides.",
          "type": "string"
        },
        "name": {
          "description": "name, human readable name of group.",
          "type": "string"
        },
        "resourceLimits": {
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          },
          "description": "resource_limits indicate the maximum number of resources allowed for this group by type.",
          "type": "object"
        },
        "verified": {
          "title": "verified means we've verified the owners of this organization. Restrictions include:\n- Only organizations (root groups) can be verified\n- Property can only be set by manually by Chainguardians\n- If verified is set, the organizations name field must be globally unique\n- If verified is set the organizations name should be a domain name",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "iamGroupInvite": {
      "properties": {
        "code": {
          "description": "code is the json-encoded authentication code.",
          "type": "string"
        },
        "expiration": {
          "description": "expiration, timestamp this invite becomes no longer valid.",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "id, The group UIDP under which this invite resides.",
          "type": "string"
        },
        "keyId": {
          "description": "key_id is used to identify the verification key for this code.",
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/iamRole",
          "description": "role is the role the invited identity will be role-bound to the group with."
        }
      },
      "type": "object"
    },
    "iamGroupInviteList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/iamStoredGroupInvite"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "iamGroupList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/iamGroup"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "iamIdentity": {
      "properties": {
        "awsIdentity": {
          "$ref": "#/definitions/IdentityAWSIdentity",
          "title": "aws_identity matches AWS IAM users and roles to an identity"
        },
        "claimMatch": {
          "$ref": "#/definitions/IdentityClaimMatch",
          "description": "claim_match checks the third party IdP token's claims against one\nor more configured patterns."
        },
        "createdAt": {
          "description": "created_at is the timestamp for when the identity was created.",
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "description": "description, human readable of identity.",
          "type": "string"
        },
        "id": {
          "description": "id is unique identifier of this specific identity.",
          "type": "string"
        },
        "name": {
          "description": "name, human readable name of identity.",
          "type": "string"
        },
        "servicePrincipal": {
          "$ref": "#/definitions/iamServicePrincipal",
          "description": "service_principal is the name of the Chainguard service that is\nallowed to assume this identity.  These names correlate with the\nservice names used in impersonation with account associations."
        },
        "static": {
          "$ref": "#/definitions/IdentityStaticKeys",
          "description": "static is equivalent to literal, but instead of discovering the\nIdP's verification keys we verify the identity using pre-registered\nverification keys.  This is intended for use with identities from\nproviders without an \"online\" issuer (network accessible to our IdP),\nsuch as a KinD/minikube cluster.\nNOTE: because this path does not have a mechanism for key rotation\nthe identity will expire, with a maximum lifetime of 30d."
        },
        "updatedAt": {
          "description": "updated_at is the timestamp for when the identity was last updated.",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "iamIdentityList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/iamIdentity"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "iamIdentityProvider": {
      "properties": {
        "defaultRole": {
          "description": "default_role is the UIDP of an optional default role\nto grant users of this identity provider.",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "title": "id is unique identifier of this specific identity provider",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "oidc": {
          "$ref": "#/definitions/IdentityProviderOIDC"
        }
      },
      "type": "object"
    },
    "iamIdentityProviderList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/iamIdentityProvider"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "iamKMSCA": {
      "properties": {
        "certChain": {
          "title": "cert_chain is the root certificate and (optional) chain\nin PEM-encoded format",
          "type": "string"
        },
        "keyRef": {
          "title": "key_ref is a unique reference to the signing key used for this CA\nmost likely a KMS key prefixed with gcpkms://, awskms://, azurekms:// etc\nand the relevant resource name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "iamPolicy": {
      "properties": {
        "createdAt": {
          "description": "created_at is the timestamp for when the policy was created.",
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "description": "description, human readable description of policy.",
          "type": "string"
        },
        "document": {
          "description": "document, YAML encoded policy document.",
          "type": "string"
        },
        "enforcedVersion": {
          "$ref": "#/definitions/iamPolicyVersion",
          "description": "enforced_version contains information about the enforced version of this policy.\nWhen used as a return value, Policy.name, Policy.description, and Policy.document are all copies of\nthe respective fields in enforced_version for backwards compatibility. enforced_version may be empty for\nlegacy policies without versions.\nWhen used for Create or Update, set enforced_version.label to set an optional version label."
        },
        "id": {
          "description": "id is identifier of this specific policy.",
          "type": "string"
        },
        "name": {
          "description": "name, human readable name of policy.\nThis field is populated from the document and any existing value will be ignored for Create/Update.",
          "type": "string"
        },
        "updatedAt": {
          "description": "updated_at is the timestamp when the current version of the policy was last updated.",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "iamPolicyAuthor": {
      "properties": {
        "email": {
          "description": "email is the email address of the author, if known.",
          "type": "string"
        },
        "id": {
          "description": "id is the UID of the author identity.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "iamPolicyList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/iamPolicy"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "iamPolicyVersion": {
      "properties": {
        "author": {
          "$ref": "#/definitions/iamPolicyAuthor",
          "description": "author is information about the identity that created/updated this version of the policy, if known."
        },
        "createdAt": {
          "description": "created_at is the timestamp from when this version was created.",
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "description": "description, human-readable description of policy.",
          "type": "string"
        },
        "document": {
          "description": "document, YAML encoded policy document.",
          "type": "string"
        },
        "id": {
          "description": "id is the identifier of this specific policy version.",
          "type": "string"
        },
        "label": {
          "description": "label is a human-readable identifier for this version of the policy.",
          "type": "string"
        },
        "name": {
          "description": "name, human-readable name of policy.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "iamPolicyVersionList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/iamPolicyVersion"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "iamRole": {
      "properties": {
        "capabilities": {
          "description": "capabilities, human readable list of capabilities supported by the group.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "description": "description, human readable description of group.",
          "type": "string"
        },
        "id": {
          "description": "id, The Group path under which this Role resides.",
          "type": "string"
        },
        "name": {
          "description": "name, human readable name of group.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "iamRoleBinding": {
      "properties": {
        "group": {
          "description": "group, UIDP of the group to bind. This field is ignored and will be removed\nin the future. The group is always the parent of the UIDP.",
          "type": "string"
        },
        "id": {
          "description": "id, the UID of this role binding.",
          "type": "string"
        },
        "identity": {
          "description": "identity, UID of the Identity to bind.",
          "type": "string"
        },
        "role": {
          "title": "role, UIDP of the Role to bind",
          "type": "string"
        }
      },
      "type": "object"
    },
    "iamRoleBindingList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/RoleBindingListBinding"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "iamRoleList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/iamRole"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "iamServicePrincipal": {
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "COSIGNED",
        "INGESTER",
        "CATALOG_SYNCER"
      ],
      "type": "string"
    },
    "iamSigstore": {
      "properties": {
        "certificateAuthority": {
          "$ref": "#/definitions/iamCertificateAuthority",
          "title": "certificate authority for this instance of sigstore"
        },
        "description": {
          "description": "description, human-readable description of the sigstore instance.",
          "type": "string"
        },
        "hostname": {
          "title": "unique hostname of this sigstore instance",
          "type": "string"
        },
        "id": {
          "description": "id is identifier of this specific sigstore instance.",
          "type": "string"
        },
        "name": {
          "description": "name, human-readable name of the sigstore instance.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "iamSigstoreList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/iamSigstore"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "iamStoredGroupInvite": {
      "properties": {
        "expiration": {
          "description": "expiration, timestamp this invite becomes no longer valid.",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "id, The group UIDP under which this invite resides.",
          "type": "string"
        },
        "keyId": {
          "description": "key_id is used to identify the verification key for this code.",
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/iamRole",
          "description": "role is the role the invited identity will be role-bound to the group with."
        }
      },
      "type": "object"
    },
    "oidcRawToken": {
      "properties": {
        "token": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "oidcTokenPair": {
      "description": "ExchangeRefreshToken returns a pair of token, in order to allow\nrefresh token to also be rotated.",
      "properties": {
        "refreshToken": {
          "$ref": "#/definitions/oidcRawToken"
        },
        "token": {
          "$ref": "#/definitions/oidcRawToken"
        }
      },
      "type": "object"
    },
    "pingResponse": {
      "properties": {
        "response": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "protobufAny": {
      "additionalProperties": {},
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "registryCatalogTier": {
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "FREE",
        "STANDARD",
        "PREMIUM"
      ],
      "type": "string"
    },
    "registryChangedImageConfig": {
      "properties": {
        "changedStopSignal": {
          "$ref": "#/definitions/ChangedImageConfigChangedStopSignal"
        },
        "changedUser": {
          "$ref": "#/definitions/ChangedImageConfigChangedUser"
        },
        "changedWorkingDir": {
          "$ref": "#/definitions/ChangedImageConfigChangedWorkingDir"
        },
        "cmds": {
          "$ref": "#/definitions/ChangedImageConfigCmdDiff"
        },
        "entrypoints": {
          "$ref": "#/definitions/ChangedImageConfigEntrypointDiff"
        },
        "envs": {
          "$ref": "#/definitions/ChangedImageConfigEnvDiff"
        },
        "volumes": {
          "$ref": "#/definitions/ChangedImageConfigVolumeDiff"
        }
      },
      "type": "object"
    },
    "registryDiffImageResponse": {
      "properties": {
        "config": {
          "$ref": "#/definitions/registryImageConfigDiff"
        },
        "packages": {
          "$ref": "#/definitions/registryPackagesDiff"
        },
        "vulnerabilities": {
          "$ref": "#/definitions/registryVulnerabilitiesDiff"
        },
        "warnings": {
          "description": "warnings is a list of warning messages to return to the requesting client.\nWarning messages describe a problem the client making the DiffImageRequest should correct or be aware of.\nWarnings over 256 characters and large numbers of warnings may be truncated.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "registryImageConfigDiff": {
      "properties": {
        "changed": {
          "$ref": "#/definitions/registryChangedImageConfig"
        }
      },
      "type": "object"
    },
    "registryPackageReference": {
      "description": "PackageReference is a reference to a package, containing minimal information to identify it.",
      "properties": {
        "name": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "registryPackagesDiff": {
      "properties": {
        "added": {
          "items": {
            "$ref": "#/definitions/registryPackageReference"
          },
          "type": "array"
        },
        "changed": {
          "items": {
            "$ref": "#/definitions/PackagesDiffChangedPackageReference"
          },
          "type": "array"
        },
        "removed": {
          "items": {
            "$ref": "#/definitions/registryPackageReference"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "registryRepo": {
      "properties": {
        "bundles": {
          "description": "bundles is a list of tags/labels that allow us to group repositories to each other for sales purposes.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "catalogTier": {
          "$ref": "#/definitions/registryCatalogTier",
          "description": "catalog_tier is the catalog tier this repository belongs to."
        },
        "id": {
          "description": "id is the identifier of this specific repository.",
          "type": "string"
        },
        "name": {
          "description": "name is the human-readable name of the repository.",
          "type": "string"
        },
        "readme": {
          "description": "readme is raw Markdown file contents describing the repo.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "registryRepoList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/registryRepo"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "registryScannerMetadata": {
      "properties": {
        "digest": {
          "type": "string"
        },
        "scanner": {
          "$ref": "#/definitions/tenantScanner"
        },
        "vulnerabilityDbLastBuildTime": {
          "format": "date-time",
          "type": "string"
        },
        "vulnerabilityDbSchemaVersion": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "registryTag": {
      "properties": {
        "bundles": {
          "description": "bundles is a list of tags/labels for sales purposes.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "deprecated": {
          "description": "deprecated, true if the tag is deprecated.",
          "type": "boolean"
        },
        "digest": {
          "description": "digest, the digest of the manifest with this tag.",
          "type": "string"
        },
        "id": {
          "description": "id, identifier of this Tag, a UIDP under a Repo.",
          "type": "string"
        },
        "lastUpdated": {
          "description": "last time this tag was updated.",
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "description": "name, the unique name of the Tag.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "registryTagHistory": {
      "properties": {
        "digest": {
          "type": "string"
        },
        "updateTimestamp": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "registryTagHistoryList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/registryTagHistory"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "registryTagList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/registryTag"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "registryVersionReference": {
      "properties": {
        "reference": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "registryVulnerabilitiesDiff": {
      "properties": {
        "added": {
          "items": {
            "$ref": "#/definitions/registryVulnerabilityReference"
          },
          "type": "array"
        },
        "metadata": {
          "items": {
            "$ref": "#/definitions/registryScannerMetadata"
          },
          "type": "array"
        },
        "removed": {
          "items": {
            "$ref": "#/definitions/registryVulnerabilityReference"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "registryVulnerabilityReference": {
      "description": "VulnerabilityReference is a reference to a vulnerability, containing minimal information to identify it.",
      "properties": {
        "id": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "severity": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "rpcStatus": {
      "properties": {
        "code": {
          "format": "int32",
          "type": "integer"
        },
        "details": {
          "items": {
            "$ref": "#/definitions/protobufAny"
          },
          "type": "array"
        },
        "message": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "tenantAttestation": {
      "description": "Attestation represents a normalized Attestation that we have ingested into our datastore.\nThey are linked to Signatures via ID, as in they are 'children' of Signatures\nThere can be multiple of these that we keep.",
      "properties": {
        "description": {
          "title": "Short description of the Attestation",
          "type": "string"
        },
        "digest": {
          "title": "digest of the Attestation when ingested",
          "type": "string"
        },
        "format": {
          "title": "format holds the Document format type",
          "type": "string"
        },
        "generatedAt": {
          "description": "generated_at holds when the Attestation was generated.",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "id, The Attestation UIDP at which this Attestation resides in the hierarchy.",
          "type": "string"
        },
        "name": {
          "description": "Name of the Attestation.",
          "type": "string"
        },
        "rawAttestation": {
          "format": "byte",
          "title": "raw_attestation is a free form type to stub in any attestations so we don't end up a\nadding new tables for all the new type of attestations, initial goal is to add image configs\nand anything which comes up after that",
          "type": "string"
        }
      },
      "type": "object"
    },
    "tenantAttestationList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/tenantAttestation"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "tenantCluster": {
      "properties": {
        "activity": {
          "additionalProperties": {
            "$ref": "#/definitions/tenantClusterActivity"
          },
          "description": "activity is a mapping from \"Source\" URLs to an activity record summarizing\nrecent activity from this source.",
          "type": "object"
        },
        "affinity": {
          "$ref": "#/definitions/tenantClusterLocation",
          "description": "affinity specifies a scheduling preference for where to run the managed agent.\nOther factors, such as the provider may be taken into account when choosing a\nhost cluster."
        },
        "agentVersion": {
          "description": "agent_version holds the version of the Chainguard agent last reported by the cluster.",
          "type": "string"
        },
        "authInfo": {
          "$ref": "#/definitions/ClusterAuthInfo",
          "description": "auth_info holds authentication details for connecting to KinD in test scenarios."
        },
        "description": {
          "description": "a short description of this cluster.",
          "type": "string"
        },
        "enforcerOptions": {
          "$ref": "#/definitions/tenantClusterEnforcerOptions",
          "title": "EnforcerOptions contains additional Enforcer configuration settings.\n+optional"
        },
        "group": {
          "$ref": "#/definitions/iamGroup",
          "title": "group the cluster resides in"
        },
        "hostCluster": {
          "description": "host_cluster surfaces the opaque identifier for the Chainguard cluster hosting\nthis agent.",
          "type": "string"
        },
        "id": {
          "description": "id, The Cluster UIDP under which this Cluster resides.",
          "type": "string"
        },
        "info": {
          "$ref": "#/definitions/ClusterInfo",
          "description": "info contains the cluster information from the kubeconfig context."
        },
        "issuer": {
          "description": "issuer is the identity issuer tied to this cluster.",
          "type": "string"
        },
        "lastSeen": {
          "description": "last_seen tracks the timestamp at which this cluster was last seen.",
          "format": "date-time",
          "type": "string"
        },
        "managedName": {
          "description": "managed_name is the unique name we have given to this cluster's managed agent.\nThis field is output-only, and is populated only when this cluster is \"managed\".",
          "type": "string"
        },
        "name": {
          "description": "name of the cluster.",
          "type": "string"
        },
        "profiles": {
          "description": "profiles specifies the root set of tenant configurations that we want to run\non this cluster.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "provider": {
          "$ref": "#/definitions/ClusterProvider",
          "description": "provider holds the flavor of cluster provider, which is used to determine how we\nauthenticate with the cluster."
        },
        "registered": {
          "description": "registered tracks the timestamp at which this cluster was registered.",
          "format": "date-time",
          "type": "string"
        },
        "remoteId": {
          "description": "remote_id is the remote ID of this cluster.",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/tenantClusterStatus",
          "description": "status contains the managed cluster's status."
        },
        "version": {
          "description": "version holds the Kubernetes version last reported by the cluster.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "tenantClusterActivity": {
      "properties": {
        "controllerName": {
          "description": "controller_name is the name of the Controller CRD which was the source of this\nactivity on the tenant cluster.",
          "type": "string"
        },
        "lastSeen": {
          "description": "last_seen tracks the timestamp at which this source was last active.",
          "format": "date-time",
          "type": "string"
        },
        "namespace": {
          "description": "namespace is the namespace in which the source of this cluster activity lives.",
          "type": "string"
        },
        "profile": {
          "description": "profile is the Chainguard profile to which the source of this activity belongs.",
          "type": "string"
        },
        "specHash": {
          "description": "spec_hash is the hash of the Controller or Webhook CRD's spec, which forms a\nloose form of versioning.",
          "type": "string"
        },
        "webhookName": {
          "description": "webhook_name is the name of the Webhook CRD which was the source of this\nactivity on the tenant cluster.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "tenantClusterCIDRResponse": {
      "properties": {
        "cidrBlocks": {
          "description": "cidr_blocks specifies the cidr blocks enforce uses to communicate with clusters.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "tenantClusterConfigRequestEnforcerOptions": {
      "properties": {
        "enableCipCache": {
          "title": "+optional",
          "type": "boolean"
        },
        "namespaceEnforcementMode": {
          "$ref": "#/definitions/tenantClusterConfigRequestNamespaceEnforcementMode",
          "title": "+optional"
        },
        "webhookFailOpen": {
          "title": "+optional",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "tenantClusterConfigRequestNamespaceEnforcementMode": {
      "default": "OptOut",
      "enum": [
        "OptOut",
        "OptIn"
      ],
      "type": "string"
    },
    "tenantClusterConfigResponse": {
      "properties": {
        "mcpConfig": {
          "format": "byte",
          "type": "string"
        },
        "profiles": {
          "items": {
            "type": "string"
          },
          "title": "profiles includes the full set of profiles returned (including transitive\ndependencies of the input profiles)",
          "type": "array"
        },
        "tenantConfig": {
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object"
    },
    "tenantClusterDiscoveryRequest": {
      "properties": {
        "id": {
          "description": "id is the exact UIDP of the group to impersonate to search for clusters.",
          "type": "string"
        },
        "profiles": {
          "description": "profiles includes the set of profiles to perform discovery for,\nwhich may impact eligibility (some profiles may not be supported\non some providers).",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "providers": {
          "description": "providers is the list of providers to perform discovery on.",
          "items": {
            "$ref": "#/definitions/ClusterProvider"
          },
          "type": "array"
        },
        "states": {
          "description": "states is a collection of the states to return, or all if\nnone are specified.",
          "items": {
            "$ref": "#/definitions/tenantClusterDiscoveryRequestState"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "tenantClusterDiscoveryRequestState": {
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "UNSUPPORTED",
        "NEEDS_WORK",
        "ELIGIBLE",
        "ENROLLED"
      ],
      "type": "string"
    },
    "tenantClusterDiscoveryResponse": {
      "properties": {
        "results": {
          "items": {
            "$ref": "#/definitions/ClusterDiscoveryResponseResult"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "tenantClusterEnforcerOptions": {
      "properties": {
        "enableCipCache": {
          "title": "+optional",
          "type": "boolean"
        },
        "namespaceEnforcementMode": {
          "$ref": "#/definitions/tenantClusterNamespaceEnforcementMode",
          "title": "+optional"
        },
        "webhookFailOpen": {
          "title": "+optional",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "tenantClusterList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/tenantCluster"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "tenantClusterLocation": {
      "default": "AUTO",
      "enum": [
        "AUTO",
        "US_EAST",
        "US_CENTRAL",
        "US_WEST"
      ],
      "title": "- US_EAST: Use 1xx for US",
      "type": "string"
    },
    "tenantClusterNamespaceEnforcementMode": {
      "default": "OptOut",
      "enum": [
        "OptOut",
        "OptIn"
      ],
      "type": "string"
    },
    "tenantClusterProfilesResponse": {
      "properties": {
        "profile": {
          "items": {
            "$ref": "#/definitions/ClusterProfilesResponseProfile"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "tenantClusterStatus": {
      "properties": {
        "message": {
          "type": "string"
        },
        "ready": {
          "$ref": "#/definitions/ClusterStatusState"
        },
        "reason": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "tenantComponentGraph": {
      "properties": {
        "edges": {
          "items": {
            "$ref": "#/definitions/ComponentGraphEdge"
          },
          "type": "array"
        },
        "nodes": {
          "items": {
            "$ref": "#/definitions/ComponentGraphNode"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "tenantFile2": {
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "types": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "tenantFix": {
      "properties": {
        "state": {
          "$ref": "#/definitions/FixState",
          "description": "state reflects the state of the fix, e.g. fixed, unknown, not-fixed, won't-fix."
        },
        "versions": {
          "description": "List of in versions of the package on which the vulnerability has been solved.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "tenantPackage": {
      "properties": {
        "name": {
          "type": "string"
        },
        "purl": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "tenantPackage2": {
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "license": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "purl": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "tenantRecommendation": {
      "properties": {
        "description": {
          "description": "Output only. Free form text describing how this can be resolved.",
          "readOnly": true,
          "type": "string"
        },
        "documentationUrl": {
          "description": "Output only. Chainguard EDU link for more details on this Recommendation.",
          "readOnly": true,
          "type": "string"
        },
        "replace": {
          "$ref": "#/definitions/RecommendationReplaceArtifact"
        }
      },
      "type": "object"
    },
    "tenantRecord": {
      "properties": {
        "cluster": {
          "description": "cluster identifies the specific cluster for the record.",
          "type": "string"
        },
        "id": {
          "title": "id holds the UIDP for this image's record",
          "type": "string"
        },
        "image": {
          "description": "image is the container image for the record.",
          "type": "string"
        },
        "lastRefreshed": {
          "additionalProperties": {
            "format": "date-time",
            "type": "string"
          },
          "description": "last_refreshed will hold a PredicateType =\u003e Last time it was successfully\nrefreshed.",
          "type": "object"
        },
        "lastSeen": {
          "description": "last_seen is the last time we've seen this image anywhere on this cluster.",
          "format": "date-time",
          "type": "string"
        },
        "sboms": {
          "items": {
            "$ref": "#/definitions/tenantSbom"
          },
          "type": "array"
        },
        "status": {
          "additionalProperties": {
            "$ref": "#/definitions/tenantRecordStatus"
          },
          "description": "status is a map from analysis type (e.g. \"sbom\", \"vuln\") =\u003e RecordStatus to indidate success/failure,\nthe analysis timestamp, as well as any diagnostic message in case of failures.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "tenantRecordList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/tenantRecord"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "tenantRecordStatus": {
      "properties": {
        "diagnostic": {
          "type": "string"
        },
        "lastChecked": {
          "format": "date-time",
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/RecordStatusResult"
        }
      },
      "type": "object"
    },
    "tenantRisk": {
      "properties": {
        "description": {
          "description": "Output only. Free form text describing this Risk.",
          "readOnly": true,
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/RiskDetails",
          "description": "What kind of risk is this? Lack of signatures, vulnerability, SBOM quality, etc."
        },
        "documentationUrl": {
          "description": "Output only. Chainguard EDU link for more details on this Risk.",
          "readOnly": true,
          "type": "string"
        },
        "groupId": {
          "description": "Grouping identifier to associate Risks in the same UIDP\nto each other.",
          "type": "string"
        },
        "id": {
          "title": "Risk ID (UIDP resource + unique ID)",
          "type": "string"
        },
        "inputs": {
          "description": "List of UIDPs that were used to determine this Risk.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "lastSeen": {
          "description": "Output only. When Enforce last saw this Risk.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "recommendations": {
          "description": "Optional. Chainguard's recommendation(s) for how to resolve this Risk.",
          "items": {
            "$ref": "#/definitions/tenantRecommendation"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "tenantRiskList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/tenantRisk"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "tenantSbom": {
      "properties": {
        "packages": {
          "items": {
            "$ref": "#/definitions/tenantPackage"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "tenantSbom2": {
      "description": "Sbom represents a normalized SBOM that we have ingested into our datastore.\nThey are linked to Signatures via ID, as in they are 'children' of Signatures\nThere can be multiple of these that we keep.",
      "properties": {
        "authors": {
          "description": "authors is zero or more authors concatenated.",
          "type": "string"
        },
        "description": {
          "title": "Short description of the Sbom",
          "type": "string"
        },
        "digest": {
          "title": "digest of the SBOM when ingested",
          "type": "string"
        },
        "format": {
          "description": "format holds whether the SBOM is SPDX, CycloneDX, or other.",
          "type": "string"
        },
        "generatedAt": {
          "description": "generated_at holds when the SBOM was generated.",
          "format": "date-time",
          "type": "string"
        },
        "graph": {
          "$ref": "#/definitions/tenantComponentGraph"
        },
        "id": {
          "description": "id, The Sbom UIDP at which this Sbom resides in the hierarchy.",
          "type": "string"
        },
        "lastSeen": {
          "format": "date-time",
          "title": "last_seen tracks the timestamp at which this sbom was last seen.\nTODO(vaikas): Does this really make any sense?",
          "type": "string"
        },
        "name": {
          "description": "Name of the Sbom.",
          "type": "string"
        },
        "rawSbom": {
          "description": "raw_sbom may or may not be useful in the long term, but for now to make\nprogress on this, we'll just yolo and serialize it here.",
          "format": "byte",
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/Sbom2Source",
          "description": "source is where the SBOM came from. For example, we want to know if sbom\nwas generated by us, or ingested."
        },
        "tool": {
          "description": "tool holds the name of the tool that produced the SBOM.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "tenantSbom2List": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/tenantSbom2"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "tenantScanner": {
      "properties": {
        "name": {
          "description": "name contains the vendor name of the scanner.",
          "type": "string"
        },
        "version": {
          "description": "version holds the version of the used scanner to generate the report.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "tenantVulnReport": {
      "properties": {
        "id": {
          "description": "id, The VulnReport UIDP at which this VulnReport resides.",
          "type": "string"
        },
        "lastSeen": {
          "description": "last_seen tracks the timestamp at which this vuln report was last seen.",
          "format": "date-time",
          "type": "string"
        },
        "rawVulnReport": {
          "description": "raw_vuln_report may or may not be useful in the long term, but for now to make\nprogress on this, we'll just yolo and serialize it here.",
          "format": "byte",
          "type": "string"
        },
        "reportGeneration": {
          "description": "report_generation tracks the timestamp at which this report was generated.",
          "format": "date-time",
          "type": "string"
        },
        "scanner": {
          "$ref": "#/definitions/tenantScanner",
          "description": "scanner contains some information about the scanner used to generate the report."
        },
        "vulnerabilityDbLastBuildTime": {
          "description": "vulnerability_db_last_build_time holds the time when the vulnerability database was built last time.",
          "format": "date-time",
          "type": "string"
        },
        "vulnerabilityMatches": {
          "description": "Report's list of vulnerability matches(s).",
          "items": {
            "$ref": "#/definitions/tenantVulnerabilityMatch"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "tenantVulnReportList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/tenantVulnReport"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "tenantVulnerabilityMatch": {
      "properties": {
        "fix": {
          "$ref": "#/definitions/tenantFix",
          "description": "Fix related data about this vulnerability."
        },
        "pkg": {
          "$ref": "#/definitions/tenantPackage2",
          "description": "Package affected by this vulnerability."
        },
        "vulnerability": {
          "$ref": "#/definitions/tenantVulnerabilityRecord",
          "description": "Vulnerability holds information about the found vulnerability."
        }
      },
      "type": "object"
    },
    "tenantVulnerabilityRecord": {
      "properties": {
        "advisories": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "advisories related to this vulnerability.",
          "type": "object"
        },
        "cpeUri": {
          "description": "List of cpe_uri on which the vulnerability was found.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "cvss": {
          "description": "List of cvss information about the exploitability of the vulnerability.",
          "items": {
            "$ref": "#/definitions/VulnerabilityRecordCvss"
          },
          "type": "array"
        },
        "description": {
          "description": "a short description of this vulnerability.",
          "type": "string"
        },
        "displayId": {
          "description": "display_id is the normalized value of the vulnerability ID often defined by a CVE-ID.",
          "type": "string"
        },
        "id": {
          "description": "id of the vulnerability e.g. CVE_1231-12.",
          "type": "string"
        },
        "relatedUrls": {
          "description": "URLs related to this vulnerability.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "relatedVulnerabilities": {
          "description": "related vulnerabilities to the main vulnerability reported here.",
          "items": {
            "$ref": "#/definitions/VulnerabilityRecordRelatedVulnerability"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/VulnerabilityRecordSeverity",
          "title": "severity is the value representing the severity of the vulnerability"
        },
        "source": {
          "description": "source from where the vulnerability information was obtained, e.g. nvd, github, osv.",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "produces": null,
  "consumes": null,
  "tags": [
    {
      "name": "SecurityAdvisory"
    },
    {
      "name": "Auth"
    },
    {
      "name": "Identities"
    },
    {
      "name": "Subscriptions"
    },
    {
      "name": "GroupAccountAssociations"
    },
    {
      "name": "Groups"
    },
    {
      "name": "GroupInvites"
    },
    {
      "name": "Identities"
    },
    {
      "name": "IdentityProviders"
    },
    {
      "name": "Policies"
    },
    {
      "name": "Roles"
    },
    {
      "name": "RoleBindings"
    },
    {
      "name": "SigstoreService"
    },
    {
      "name": "SecurityTokenService"
    },
    {
      "name": "PingService"
    },
    {
      "name": "Registry"
    },
    {
      "name": "Attestations"
    },
    {
      "name": "Clusters"
    },
    {
      "name": "Records"
    },
    {
      "name": "Risks"
    },
    {
      "name": "Sboms"
    },
    {
      "name": "VulnReports"
    }
  ]
}