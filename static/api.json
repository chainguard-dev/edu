{
  "swagger": "2.0",
  "info": {
    "title": "Chainguard OpenAPI Specification (Alpha)",
    "version": "alpha"
  },
  "paths": {
    "/advisory/v1/documents": {
      "get": {
        "operationId": "SecurityAdvisory_ListDocuments",
        "parameters": [
          {
            "description": "id is the id of a package.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "cves",
            "required": false,
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/advisoryDocumentList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SecurityAdvisory"
        ]
      }
    },
    "/advisory/v1/metadata": {
      "get": {
        "operationId": "SecurityAdvisory_ListVulnerabilityMetadata",
        "parameters": [
          {
            "description": "id is the id of a vuln.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/advisoryVulnerabilityMetadataList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SecurityAdvisory"
        ]
      }
    },
    "/apk/v1/packages": {
      "get": {
        "operationId": "APK_ListAPKs",
        "parameters": [
          {
            "description": "ancestors_of are groups reachable by repeated proceeding from child to parent.",
            "in": "query",
            "name": "uidp.ancestorsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "descendants_of are groups reachable by repeated proceeding from parent to child.",
            "in": "query",
            "name": "uidp.descendantsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "children_of are groups reachable by directly proceeding from parent to children.",
            "in": "query",
            "name": "uidp.childrenOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "in_root resticts responses to root level resources (organizations, user identities)",
            "in": "query",
            "name": "uidp.inRoot",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "A name to filter by.",
            "in": "query",
            "name": "packageName",
            "required": false,
            "type": "string"
          },
          {
            "description": "An architecture to filter by (e.g., x86_64 or aarch64).",
            "in": "query",
            "name": "architecture",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apkAPKList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "summary": "ListAPKs lists all APKs that match the filter.",
        "tags": [
          "APK"
        ]
      }
    },
    "/auth/v1/ok": {
      "get": {
        "operationId": "Auth_Validate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authWhoAmI"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/v1/register": {
      "post": {
        "operationId": "Auth_Register",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authRegistrationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authSession"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/events/v1/subscriptions": {
      "get": {
        "operationId": "Subscriptions_List",
        "parameters": [
          {
            "description": "id is the exact UIDP of the record.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "ancestors_of are groups reachable by repeated proceeding from child to parent.",
            "in": "query",
            "name": "uidp.ancestorsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "descendants_of are groups reachable by repeated proceeding from parent to child.",
            "in": "query",
            "name": "uidp.descendantsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "children_of are groups reachable by directly proceeding from parent to children.",
            "in": "query",
            "name": "uidp.childrenOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "in_root resticts responses to root level resources (organizations, user identities)",
            "in": "query",
            "name": "uidp.inRoot",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/eventsSubscriptionList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ]
      }
    },
    "/events/v1/subscriptions/{id}": {
      "delete": {
        "operationId": "Subscriptions_Delete",
        "parameters": [
          {
            "description": "id is the exact UIDP of the record.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {},
              "type": "object"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ]
      }
    },
    "/events/v1/subscriptions/{parentId}": {
      "post": {
        "operationId": "Subscriptions_Create",
        "parameters": [
          {
            "description": "parent_id, The Group UIDP path under which the new subscription is associated.",
            "in": "path",
            "name": "parentId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "description": "Subscription is the subscription to create;",
            "in": "body",
            "name": "subscription",
            "required": true,
            "schema": {
              "$ref": "#/definitions/eventsSubscription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/eventsSubscription"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ]
      }
    },
    "/iam/v1/account_associations": {
      "get": {
        "operationId": "GroupAccountAssociations_List",
        "parameters": [
          {
            "description": "group is the exact UIDP of the group whose associations we want to list.",
            "in": "query",
            "name": "group",
            "required": false,
            "type": "string"
          },
          {
            "description": "name is the exact name of the association.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamAccountAssociationsList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "GroupAccountAssociations"
        ]
      }
    },
    "/iam/v1/account_associations/{group}": {
      "delete": {
        "operationId": "GroupAccountAssociations_Delete",
        "parameters": [
          {
            "description": "group is the exact UIDP of the group whose associations we want to delete.",
            "in": "path",
            "name": "group",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {},
              "type": "object"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "GroupAccountAssociations"
        ]
      },
      "post": {
        "operationId": "GroupAccountAssociations_Create",
        "parameters": [
          {
            "description": "group is the group with which this account information is associated.",
            "in": "path",
            "name": "group",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupAccountAssociationsCreateBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamAccountAssociations"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "GroupAccountAssociations"
        ]
      },
      "put": {
        "operationId": "GroupAccountAssociations_Update",
        "parameters": [
          {
            "description": "group is the group with which this account information is associated.",
            "in": "path",
            "name": "group",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupAccountAssociationsUpdateBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamAccountAssociations"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "GroupAccountAssociations"
        ]
      }
    },
    "/iam/v1/account_associations/{group}:check": {
      "post": {
        "operationId": "GroupAccountAssociations_Check",
        "parameters": [
          {
            "description": "group is the exact UIDP of the group whose associations we want to check",
            "in": "path",
            "name": "group",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupAccountAssociationsCheckBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamAccountAssociationsStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "GroupAccountAssociations"
        ]
      }
    },
    "/iam/v1/group_invites": {
      "get": {
        "operationId": "GroupInvites_List",
        "parameters": [
          {
            "description": "group is used to identify the group this record is rooted under.",
            "in": "query",
            "name": "group",
            "required": false,
            "type": "string"
          },
          {
            "description": "id is the exact UID of the record.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "key_id is the identify the verification key for this code.",
            "in": "query",
            "name": "keyId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamGroupInviteList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "GroupInvites"
        ]
      }
    },
    "/iam/v1/group_invites/{group}": {
      "post": {
        "operationId": "GroupInvites_Create",
        "parameters": [
          {
            "description": "group, The Group UIDP path under which the new group Invite targets.",
            "in": "path",
            "name": "group",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupInvitesCreateBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamGroupInvite"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "GroupInvites"
        ]
      }
    },
    "/iam/v1/group_invites/{id}": {
      "delete": {
        "operationId": "GroupInvites_Delete",
        "parameters": [
          {
            "description": "id is the exact UIDP of the record.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {},
              "type": "object"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "GroupInvites"
        ]
      }
    },
    "/iam/v1/groups": {
      "get": {
        "operationId": "Groups_List",
        "parameters": [
          {
            "description": "id is the exact UID of the record.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "ancestors_of are groups reachable by repeated proceeding from child to parent.",
            "in": "query",
            "name": "uidp.ancestorsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "descendants_of are groups reachable by repeated proceeding from parent to child.",
            "in": "query",
            "name": "uidp.descendantsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "children_of are groups reachable by directly proceeding from parent to children.",
            "in": "query",
            "name": "uidp.childrenOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "in_root resticts responses to root level resources (organizations, user identities)",
            "in": "query",
            "name": "uidp.inRoot",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "name is the exact name of the record.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamGroupList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Groups"
        ]
      }
    },
    "/iam/v1/groups/{id}": {
      "delete": {
        "operationId": "Groups_Delete",
        "parameters": [
          {
            "description": "id is the exact UIDP of the record.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {},
              "type": "object"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Groups"
        ]
      },
      "put": {
        "operationId": "Groups_Update",
        "parameters": [
          {
            "description": "id, The group UIDP under which this group resides.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupsUpdateBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Groups"
        ]
      }
    },
    "/iam/v1/groups/{parent}": {
      "post": {
        "operationId": "Groups_Create",
        "parameters": [
          {
            "description": "parent, The Group UIDP path under which the new Group resides.\nThis is effectively the iam_scope for Create requests, but because\nwe also allow users to create new \"root\" groups, we check the scoping\nmanually. Parent is allowed to be a prefix of a UIDP of a Group within\nscope, or the name of a Group in scope.",
            "in": "path",
            "name": "parent",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "description": "Group to create.",
            "in": "body",
            "name": "group",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Groups"
        ]
      }
    },
    "/iam/v1/identities": {
      "get": {
        "operationId": "Identities_List",
        "parameters": [
          {
            "description": "ancestors_of are groups reachable by repeated proceeding from child to parent.",
            "in": "query",
            "name": "uidp.ancestorsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "descendants_of are groups reachable by repeated proceeding from parent to child.",
            "in": "query",
            "name": "uidp.descendantsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "children_of are groups reachable by directly proceeding from parent to children.",
            "in": "query",
            "name": "uidp.childrenOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "in_root resticts responses to root level resources (organizations, user identities)",
            "in": "query",
            "name": "uidp.inRoot",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "id is unique identifier to look up.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamIdentityList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Identities"
        ]
      }
    },
    "/iam/v1/identities/lookup": {
      "get": {
        "operationId": "Identities_Lookup",
        "parameters": [
          {
            "description": "issuer is the oidc issuer to look up.",
            "in": "query",
            "name": "issuer",
            "required": false,
            "type": "string"
          },
          {
            "description": "subject is the subject to look up.",
            "in": "query",
            "name": "subject",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamIdentity"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Identities"
        ]
      }
    },
    "/iam/v1/identities/metadata": {
      "patch": {
        "operationId": "Identities_UpdateMetadata",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/eventsIdentityMetadata"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/eventsIdentityMetadata"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Identities"
        ]
      }
    },
    "/iam/v1/identities/{id}": {
      "delete": {
        "operationId": "Identities_Delete",
        "parameters": [
          {
            "description": "ID, UIDP of the record.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {},
              "type": "object"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Identities"
        ]
      },
      "put": {
        "operationId": "Identities_Update",
        "parameters": [
          {
            "description": "id is unique identifier of this specific identity.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IdentitiesUpdateBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamIdentity"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Identities"
        ]
      }
    },
    "/iam/v1/identities/{parentId}": {
      "post": {
        "operationId": "Identities_Create",
        "parameters": [
          {
            "description": "parent_id, The Group UIDP path under which the new Identity resides.",
            "in": "path",
            "name": "parentId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "description": "Identity to create.",
            "in": "body",
            "name": "identity",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamIdentity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamIdentity"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Identities"
        ]
      }
    },
    "/iam/v1/identityProviders": {
      "get": {
        "operationId": "IdentityProviders_List",
        "parameters": [
          {
            "description": "Exact match on identity provider UIDP",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Exact match on identity provider name",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "ancestors_of are groups reachable by repeated proceeding from child to parent.",
            "in": "query",
            "name": "uidp.ancestorsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "descendants_of are groups reachable by repeated proceeding from parent to child.",
            "in": "query",
            "name": "uidp.descendantsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "children_of are groups reachable by directly proceeding from parent to children.",
            "in": "query",
            "name": "uidp.childrenOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "in_root resticts responses to root level resources (organizations, user identities)",
            "in": "query",
            "name": "uidp.inRoot",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamIdentityProviderList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "IdentityProviders"
        ]
      }
    },
    "/iam/v1/identityProviders/{id}": {
      "delete": {
        "operationId": "IdentityProviders_Delete",
        "parameters": [
          {
            "description": "id is the exact UIDP of the IdP",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {},
              "type": "object"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "IdentityProviders"
        ]
      },
      "put": {
        "operationId": "IdentityProviders_Update",
        "parameters": [
          {
            "description": "id is unique identifier of this specific identity provider",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IdentityProvidersUpdateBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamIdentityProvider"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "IdentityProviders"
        ]
      }
    },
    "/iam/v1/identityProviders/{parentId}": {
      "post": {
        "operationId": "IdentityProviders_Create",
        "parameters": [
          {
            "description": "parent_id is the exact UIDP of the IAM group to nest this identity provider under",
            "in": "path",
            "name": "parentId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "identityProvider",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamIdentityProvider"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamIdentityProvider"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "IdentityProviders"
        ]
      }
    },
    "/iam/v1/rolebindings": {
      "get": {
        "operationId": "RoleBindings_List",
        "parameters": [
          {
            "description": "id is the exact UID of the record.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "ancestors_of are groups reachable by repeated proceeding from child to parent.",
            "in": "query",
            "name": "uidp.ancestorsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "descendants_of are groups reachable by repeated proceeding from parent to child.",
            "in": "query",
            "name": "uidp.descendantsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "children_of are groups reachable by directly proceeding from parent to children.",
            "in": "query",
            "name": "uidp.childrenOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "in_root resticts responses to root level resources (organizations, user identities)",
            "in": "query",
            "name": "uidp.inRoot",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamRoleBindingList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "RoleBindings"
        ]
      }
    },
    "/iam/v1/rolebindings/{id}": {
      "delete": {
        "operationId": "RoleBindings_Delete",
        "parameters": [
          {
            "description": "id is the exact UID of the record.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {},
              "type": "object"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "RoleBindings"
        ]
      },
      "put": {
        "operationId": "RoleBindings_Update",
        "parameters": [
          {
            "description": "id, the UID of this role binding.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleBindingsUpdateBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamRoleBinding"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "RoleBindings"
        ]
      }
    },
    "/iam/v1/rolebindings/{parent}": {
      "post": {
        "operationId": "RoleBindings_Create",
        "parameters": [
          {
            "description": "parent, The Group UIDP path under which the new RoleBinding resides.",
            "in": "path",
            "name": "parent",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "description": "RoleBinding to create.",
            "in": "body",
            "name": "roleBinding",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamRoleBinding"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamRoleBinding"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "RoleBindings"
        ]
      }
    },
    "/iam/v1/roles": {
      "get": {
        "operationId": "Roles_List",
        "parameters": [
          {
            "description": "id is the exact UIDP of the record.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "name is the exact name of the record",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "parent is the exact UIDP of the parent, or / for root",
            "in": "query",
            "name": "parent",
            "required": false,
            "type": "string"
          },
          {
            "description": "ancestors_of are groups reachable by repeated proceeding from child to parent.",
            "in": "query",
            "name": "uidp.ancestorsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "descendants_of are groups reachable by repeated proceeding from parent to child.",
            "in": "query",
            "name": "uidp.descendantsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "children_of are groups reachable by directly proceeding from parent to children.",
            "in": "query",
            "name": "uidp.childrenOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "in_root resticts responses to root level resources (organizations, user identities)",
            "in": "query",
            "name": "uidp.inRoot",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamRoleList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Roles"
        ]
      }
    },
    "/iam/v1/roles/{id}": {
      "delete": {
        "operationId": "Roles_Delete",
        "parameters": [
          {
            "description": "id is the exact UIDP of the record.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {},
              "type": "object"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Roles"
        ]
      },
      "put": {
        "operationId": "Roles_Update",
        "parameters": [
          {
            "description": "id, The Group path under which this Role resides.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RolesUpdateBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamRole"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Roles"
        ]
      }
    },
    "/iam/v1/roles/{parentId}": {
      "post": {
        "operationId": "Roles_Create",
        "parameters": [
          {
            "description": "parent_id, The Group UIDP path under which the new Role resides.",
            "in": "path",
            "name": "parentId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "description": "Role to create.",
            "in": "body",
            "name": "role",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamRole"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Roles"
        ]
      }
    },
    "/notifications/v1/notifications": {
      "get": {
        "operationId": "Notifications_List",
        "parameters": [
          {
            "description": "The id of the notification.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "default": "UNSPECIFIED",
            "description": "Location of where notifications are displayed.\n\n - UNSPECIFIED: The \"unset\" value.\n - CONSOLE: Console.\n - DIRECTORY: Directory.\n - CHAINCTL: Chainctl.",
            "enum": [
              "UNSPECIFIED",
              "CONSOLE",
              "DIRECTORY",
              "CHAINCTL"
            ],
            "in": "query",
            "name": "location",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/notificationsNotificationsList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Notifications"
        ]
      }
    },
    "/ping/v1/ping": {
      "get": {
        "operationId": "PingService_Ping",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "PingService"
        ]
      }
    },
    "/registry/v1/repos": {
      "get": {
        "operationId": "Registry_ListRepos",
        "parameters": [
          {
            "description": "ancestors_of are groups reachable by repeated proceeding from child to parent.",
            "in": "query",
            "name": "uidp.ancestorsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "descendants_of are groups reachable by repeated proceeding from parent to child.",
            "in": "query",
            "name": "uidp.descendantsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "children_of are groups reachable by directly proceeding from parent to children.",
            "in": "query",
            "name": "uidp.childrenOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "in_root resticts responses to root level resources (organizations, user identities)",
            "in": "query",
            "name": "uidp.inRoot",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "name is the exact name of the record.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "id is the identifier of this specific repository.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/registryRepoList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      }
    },
    "/registry/v1/repos/{id}": {
      "delete": {
        "operationId": "Registry_DeleteRepo",
        "parameters": [
          {
            "description": "ID, UID of the record.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {},
              "type": "object"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      },
      "put": {
        "operationId": "Registry_UpdateRepo",
        "parameters": [
          {
            "description": "id is the identifier of this specific repository.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegistryUpdateRepoBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/registryRepo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      }
    },
    "/registry/v1/repos/{parentId}": {
      "post": {
        "operationId": "Registry_CreateRepo",
        "parameters": [
          {
            "in": "path",
            "name": "parentId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "repo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/registryRepo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/registryRepo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      }
    },
    "/registry/v1/repos/{repoId}/digest/{digest}/rawsbom": {
      "get": {
        "operationId": "Registry_GetRawSbom",
        "parameters": [
          {
            "description": "The UIDP of the image repo to get config for.",
            "in": "path",
            "name": "repoId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The digest of the image to get config for.",
            "in": "path",
            "name": "digest",
            "pattern": "[^/]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The oci reference to get sbom for.",
            "in": "query",
            "name": "reference",
            "required": false,
            "type": "string"
          },
          {
            "description": "The architecture to get config for.",
            "in": "query",
            "name": "arch",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/registryRawSbom"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      }
    },
    "/registry/v1/repos/{repoId}/digests/{digest}/architectures": {
      "get": {
        "operationId": "Registry_GetArchs",
        "parameters": [
          {
            "description": "The UIDP of the image repo to get architectures for.",
            "in": "path",
            "name": "repoId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The digest of the image to get architectures for.",
            "in": "path",
            "name": "digest",
            "pattern": "[^/]+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/registryArchs"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      }
    },
    "/registry/v1/repos/{repoId}/digests/{digest}/imageconfig": {
      "get": {
        "operationId": "Registry_GetImageConfig",
        "parameters": [
          {
            "description": "The UIDP of the image repo to get config for.",
            "in": "path",
            "name": "repoId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The digest of the image to get config for.",
            "in": "path",
            "name": "digest",
            "pattern": "[^/]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The architecture to get config for.",
            "in": "query",
            "name": "arch",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/registryImageConfig"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      }
    },
    "/registry/v1/repos/{repoId}/digests/{digest}/sbom": {
      "get": {
        "operationId": "Registry_GetSbom",
        "parameters": [
          {
            "description": "The UIDP of the image repo to get an SBOM for.",
            "in": "path",
            "name": "repoId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The digest of the image to get an SBOM for.",
            "in": "path",
            "name": "digest",
            "pattern": "[^/]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The architecture to get the SBOM for.",
            "in": "query",
            "name": "arch",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tenantSbom2"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      }
    },
    "/registry/v1/repos/{repoId}/digests/{digest}/size": {
      "get": {
        "operationId": "Registry_GetSize",
        "parameters": [
          {
            "description": "The UIDP of the image repo to get size and architecture information for.",
            "in": "path",
            "name": "repoId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The digest of the image to get size and architecture information for.",
            "in": "path",
            "name": "digest",
            "pattern": "[^/]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The architecture to filter on.",
            "in": "query",
            "name": "arch",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/registrySize"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      }
    },
    "/registry/v1/repos/{repoId}/digests/{digest}/vulnreport": {
      "get": {
        "operationId": "Registry_GetVulnReport",
        "parameters": [
          {
            "description": "The UIDP of the image repo to get a VulnReport for.",
            "in": "path",
            "name": "repoId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The digest of the image to get a VulnReport for.",
            "in": "path",
            "name": "digest",
            "pattern": "[^/]+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tenantVulnReport"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      }
    },
    "/registry/v1/repos/{repoId}/manifestmetdata": {
      "get": {
        "operationId": "Registry_ListManifestMetadata",
        "parameters": [
          {
            "description": "The UIDP of the image repo that the digests belongs to.",
            "in": "path",
            "name": "repoId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/registryManifestMetadataList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      }
    },
    "/registry/v1/tags": {
      "get": {
        "operationId": "Registry_ListTags",
        "parameters": [
          {
            "description": "ancestors_of are groups reachable by repeated proceeding from child to parent.",
            "in": "query",
            "name": "uidp.ancestorsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "descendants_of are groups reachable by repeated proceeding from parent to child.",
            "in": "query",
            "name": "uidp.descendantsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "children_of are groups reachable by directly proceeding from parent to children.",
            "in": "query",
            "name": "uidp.childrenOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "in_root resticts responses to root level resources (organizations, user identities)",
            "in": "query",
            "name": "uidp.inRoot",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "The unique name of the Tag to list.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "The timestamp after which returned records were updated.",
            "format": "date-time",
            "in": "query",
            "name": "updatedSince",
            "required": false,
            "type": "string"
          },
          {
            "description": "Exclude tags of the form \"sha256-*\".",
            "in": "query",
            "name": "excludeReferrers",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Exclude tags of the form \"*-20yymmdd\".",
            "in": "query",
            "name": "excludeDates",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Exclude tags of the form \"*-r[0-9]+\".",
            "in": "query",
            "name": "excludeEpochs",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/registryTagList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      }
    },
    "/registry/v1/tags/{id}": {
      "delete": {
        "operationId": "Registry_DeleteTag",
        "parameters": [
          {
            "description": "ID, UID of the record.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {},
              "type": "object"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      },
      "put": {
        "operationId": "Registry_UpdateTag",
        "parameters": [
          {
            "description": "id, identifier of this Tag, a UIDP under a Repo.",
            "in": "path",
            "name": "id",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegistryUpdateTagBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/registryTag"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      }
    },
    "/registry/v1/tags/{parentId}/history": {
      "get": {
        "operationId": "Registry_ListTagHistory",
        "parameters": [
          {
            "description": "tag UIDP to list history for.",
            "in": "path",
            "name": "parentId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "format": "date-time",
            "in": "query",
            "name": "start",
            "required": false,
            "type": "string"
          },
          {
            "format": "date-time",
            "in": "query",
            "name": "end",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/registryTagHistoryList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      }
    },
    "/registry/v1/tags/{repoId}": {
      "post": {
        "operationId": "Registry_CreateTag",
        "parameters": [
          {
            "in": "path",
            "name": "repoId",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "tag",
            "required": true,
            "schema": {
              "$ref": "#/definitions/registryTag"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/registryTag"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      }
    },
    "/registry/v1/versions/{package}": {
      "get": {
        "operationId": "Registry_GetPackageVersionMetadata",
        "parameters": [
          {
            "description": "The name of the package.",
            "in": "path",
            "name": "package",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/registryPackageVersionMetadata"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Registry"
        ]
      }
    },
    "/registry/v1/vuln_reports": {
      "get": {
        "operationId": "Vulnerabilities_ListVulnReports",
        "parameters": [
          {
            "description": "repo_id is the UIDP of the repo to list reports for.\nOne of repo_id and digest are required.",
            "in": "query",
            "name": "repoId",
            "required": false,
            "type": "string"
          },
          {
            "description": "digest is the exact digest of the image to list reports for.\nOne of repo_id and digest are required. If populated, digest takes precedence over repo_id.",
            "in": "query",
            "name": "digest",
            "required": false,
            "type": "string"
          },
          {
            "description": "tag is the optional name of the tag to pull reports for.\nIgnored if digest is populated.",
            "in": "query",
            "name": "tag",
            "required": false,
            "type": "string"
          },
          {
            "default": "UNKNOWN",
            "description": "name is the name of the scanner.",
            "enum": [
              "UNKNOWN",
              "GRYPE",
              "TRIVY"
            ],
            "in": "query",
            "name": "scanner.name",
            "required": false,
            "type": "string"
          },
          {
            "description": "scanner_version is the version of the scanner used to generate the report.",
            "in": "query",
            "name": "scanner.version",
            "required": false,
            "type": "string"
          },
          {
            "description": "db_build_time is the time the vulnerability database was built that was used\nto generate the report.",
            "format": "date-time",
            "in": "query",
            "name": "scanner.dbBuildTime",
            "required": false,
            "type": "string"
          },
          {
            "description": "created_since returns reports that have been created\nafter the given time.",
            "format": "date-time",
            "in": "query",
            "name": "createdSince",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/registryVulnReportList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Vulnerabilities"
        ]
      }
    },
    "/registry/v1/vuln_reports/raw": {
      "get": {
        "operationId": "Vulnerabilities_GetRawVulnReport",
        "parameters": [
          {
            "description": "digest is the exact digest of the image to request the raw scan result of.",
            "in": "query",
            "name": "digest",
            "required": false,
            "type": "string"
          },
          {
            "default": "UNKNOWN",
            "description": "scanner is the scanner to request the raw report from.",
            "enum": [
              "UNKNOWN",
              "GRYPE",
              "TRIVY"
            ],
            "in": "query",
            "name": "scanner",
            "required": false,
            "type": "string"
          },
          {
            "description": "created_at is an optional timestamp to retrieve a scan report for.\nIf not given, the latest report is returned.",
            "format": "date-time",
            "in": "query",
            "name": "createdAt",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/registryRawVulnReport"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Vulnerabilities"
        ]
      }
    },
    "/sts/exchange": {
      "get": {
        "operationId": "SecurityTokenService_Exchange2",
        "parameters": [
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "aud",
            "required": false,
            "type": "array"
          },
          {
            "in": "query",
            "name": "scope",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "identity",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "List of capabilities to request for the token.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "cap",
            "required": false,
            "type": "array"
          },
          {
            "description": "Empty or the UIDP of the custom identity provider.",
            "in": "query",
            "name": "identityProvider",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/oidcRawToken"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SecurityTokenService"
        ]
      },
      "post": {
        "operationId": "SecurityTokenService_Exchange",
        "parameters": [
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "aud",
            "required": false,
            "type": "array"
          },
          {
            "in": "query",
            "name": "scope",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "identity",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "List of capabilities to request for the token.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "cap",
            "required": false,
            "type": "array"
          },
          {
            "description": "Empty or the UIDP of the custom identity provider.",
            "in": "query",
            "name": "identityProvider",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/oidcRawToken"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SecurityTokenService"
        ]
      }
    },
    "/sts/exchange_refresh_token": {
      "post": {
        "operationId": "SecurityTokenService_ExchangeRefreshToken",
        "parameters": [
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "aud",
            "required": false,
            "type": "array"
          },
          {
            "in": "query",
            "name": "scope",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "List of capabilities to request for the token.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "cap",
            "required": false,
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/oidcTokenPair"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SecurityTokenService"
        ]
      }
    },
    "/sts/headless_sessions": {
      "get": {
        "operationId": "Auth_GetHeadlessSession",
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authHeadlessSession"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/tenant/v1/vulnreports": {
      "get": {
        "operationId": "VulnReports_List",
        "parameters": [
          {
            "description": "id is the exact UID of the record.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "ancestors_of are groups reachable by repeated proceeding from child to parent.",
            "in": "query",
            "name": "uidp.ancestorsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "descendants_of are groups reachable by repeated proceeding from parent to child.",
            "in": "query",
            "name": "uidp.descendantsOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "children_of are groups reachable by directly proceeding from parent to children.",
            "in": "query",
            "name": "uidp.childrenOf",
            "required": false,
            "type": "string"
          },
          {
            "description": "in_root resticts responses to root level resources (organizations, user identities)",
            "in": "query",
            "name": "uidp.inRoot",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "active_since is the timestamp after which the records should\nhave last been observed in the returned context.",
            "format": "date-time",
            "in": "query",
            "name": "activeSince",
            "required": false,
            "type": "string"
          },
          {
            "description": "include_raw_vuln_report is a flag to return a list of reports containing the raw report.",
            "in": "query",
            "name": "includeRawVulnReport",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tenantVulnReportList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "VulnReports"
        ]
      }
    }
  },
  "definitions": {
    "AccountAssociationsAmazon": {
      "properties": {
        "account": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AccountAssociationsChainguard": {
      "properties": {
        "serviceBindings": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "service_bindings map from the Chainguard service principal to the\nUIDP of the identity that service should assume. Constraints:\n- The identity must live directly under \"group\",\n- The identity must be a service_principal,\n- The service_principal of the identity must match the key of this map.\nNote that the key space of this must match the ServicePrincipal enum,\nbut the enum type itself cannot be used here because of:\nhttps://groups.google.com/g/protobuf/c/ikeldBe60eI",
          "type": "object"
        }
      },
      "type": "object"
    },
    "AccountAssociationsCheckRequestAccountType": {
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "GOOGLE",
        "AMAZON"
      ],
      "type": "string"
    },
    "AccountAssociationsGitHubInstallation": {
      "properties": {
        "appId": {
          "description": "GitHub App ID. Output only.",
          "format": "int64",
          "readOnly": true,
          "type": "string"
        },
        "host": {
          "description": "GitHub hostname app is associated with. Output only.",
          "readOnly": true,
          "type": "string"
        },
        "installationId": {
          "description": "GitHub App Installation ID. Takes precedence over name.",
          "format": "int64",
          "type": "string"
        },
        "name": {
          "description": "GitHub user/org name the installation is installed on.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AccountAssociationsGoogle": {
      "properties": {
        "projectId": {
          "type": "string"
        },
        "projectNumber": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AccountAssociationsStatusState": {
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "Ready",
        "NotReady"
      ],
      "type": "string"
    },
    "ComponentGraphEdge": {
      "properties": {
        "predicateId": {
          "type": "string"
        },
        "subjectId": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/ComponentGraphEdgeType"
        }
      },
      "type": "object"
    },
    "ComponentGraphEdgeType": {
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "DESCRIBES",
        "CONTAINS",
        "DEPENDS_ON",
        "GENERATED_FROM"
      ],
      "title": "- GENERATED_FROM: and so on...; for inspiration, see https://spdx.github.io/spdx-spec/v2.3/relationships-between-SPDX-elements/",
      "type": "string"
    },
    "ComponentGraphNode": {
      "properties": {
        "file": {
          "$ref": "#/definitions/tenantFile2"
        },
        "package": {
          "$ref": "#/definitions/tenantPackage2"
        }
      },
      "type": "object"
    },
    "DetectionDetectionTypeManual": {
      "type": "object"
    },
    "DetectionDetectionTypeNVDAPI": {
      "properties": {
        "cpeFound": {
          "type": "string"
        },
        "cpeSearched": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "FixState": {
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "FIXED",
        "NOT_FIXED",
        "WONT_FIX"
      ],
      "type": "string"
    },
    "GroupAccountAssociationsCheckBody": {
      "properties": {
        "accountType": {
          "$ref": "#/definitions/AccountAssociationsCheckRequestAccountType"
        }
      },
      "type": "object"
    },
    "GroupAccountAssociationsCreateBody": {
      "properties": {
        "amazon": {
          "$ref": "#/definitions/AccountAssociationsAmazon",
          "description": "amazon holds information associating an Amazon account with the group."
        },
        "chainguard": {
          "$ref": "#/definitions/AccountAssociationsChainguard"
        },
        "description": {
          "description": "a short description of this association.",
          "type": "string"
        },
        "github": {
          "$ref": "#/definitions/AccountAssociationsGitHubInstallation",
          "description": "github holds information associating a GitHub installation with the group.\nNote: this AccountAssociation type is EXPERIMENTAL."
        },
        "google": {
          "$ref": "#/definitions/AccountAssociationsGoogle",
          "description": "google holds information associating a Google project with the group."
        },
        "name": {
          "description": "name of the association.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GroupAccountAssociationsUpdateBody": {
      "properties": {
        "amazon": {
          "$ref": "#/definitions/AccountAssociationsAmazon",
          "description": "amazon holds information associating an Amazon account with the group."
        },
        "chainguard": {
          "$ref": "#/definitions/AccountAssociationsChainguard"
        },
        "description": {
          "description": "a short description of this association.",
          "type": "string"
        },
        "github": {
          "$ref": "#/definitions/AccountAssociationsGitHubInstallation",
          "description": "github holds information associating a GitHub installation with the group.\nNote: this AccountAssociation type is EXPERIMENTAL."
        },
        "google": {
          "$ref": "#/definitions/AccountAssociationsGoogle",
          "description": "google holds information associating a Google project with the group."
        },
        "name": {
          "description": "name of the association.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GroupInvitesCreateBody": {
      "properties": {
        "email": {
          "description": "email is the exact email address that may accept this invite code, if specified.",
          "type": "string"
        },
        "role": {
          "description": "role is the Role UIDP the invited identity will be role-bound to the group with.",
          "type": "string"
        },
        "singleUse": {
          "description": "if single_use is set to true, then the invite will be deleted after a user joins the group.",
          "type": "boolean"
        },
        "ttl": {
          "description": "expiration, timestamp this invite becomes no longer valid.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GroupsUpdateBody": {
      "properties": {
        "description": {
          "description": "description, human readable of group.",
          "type": "string"
        },
        "name": {
          "description": "name, human readable name of group.",
          "type": "string"
        },
        "resourceLimits": {
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          },
          "description": "resource_limits indicate the maximum number of resources allowed for this group by type.",
          "type": "object"
        },
        "verified": {
          "title": "verified means we've verified the owners of this organization. Restrictions include:\n- Only organizations (root groups) can be verified\n- Property can only be set by manually by Chainguardians\n- If verified is set, the organizations name field must be globally unique\n- If verified is set the organizations name should be a domain name",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "IdentitiesUpdateBody": {
      "properties": {
        "awsIdentity": {
          "$ref": "#/definitions/IdentityAWSIdentity",
          "title": "aws_identity matches AWS IAM users and roles to an identity"
        },
        "claimMatch": {
          "$ref": "#/definitions/IdentityClaimMatch",
          "description": "claim_match checks the third party IdP token's claims against one\nor more configured patterns."
        },
        "createdAt": {
          "description": "created_at is the timestamp for when the identity was created.",
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "description": "description, human readable of identity.",
          "type": "string"
        },
        "name": {
          "description": "name, human readable name of identity.",
          "type": "string"
        },
        "servicePrincipal": {
          "$ref": "#/definitions/iamServicePrincipal",
          "description": "service_principal is the name of the Chainguard service that is\nallowed to assume this identity.  These names correlate with the\nservice names used in impersonation with account associations."
        },
        "static": {
          "$ref": "#/definitions/IdentityStaticKeys",
          "description": "static is equivalent to literal, but instead of discovering the\nIdP's verification keys we verify the identity using pre-registered\nverification keys.  This is intended for use with identities from\nproviders without an \"online\" issuer (network accessible to our IdP),\nsuch as a KinD/minikube cluster.\nNOTE: because this path does not have a mechanism for key rotation\nthe identity will expire, with a maximum lifetime of 30d."
        },
        "updatedAt": {
          "description": "updated_at is the timestamp for when the identity was last updated.",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IdentityAWSIdentity": {
      "properties": {
        "arn": {
          "title": "Exact match to Arn of AWS Identity",
          "type": "string"
        },
        "arnPattern": {
          "title": "Regular expression for matching Arn",
          "type": "string"
        },
        "awsAccount": {
          "title": "Required, matches the `Account` field in the GetCallerID AWS IAM\nresponse",
          "type": "string"
        },
        "userId": {
          "title": "Exacty match of the UserID field",
          "type": "string"
        },
        "userIdPattern": {
          "title": "Regular expression for UserId field",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IdentityClaimMatch": {
      "properties": {
        "audience": {
          "description": "audience of OIDC ID tokens issued for this identity.",
          "type": "string"
        },
        "audiencePattern": {
          "description": "audience_pattern is a regular expression for matching the\ntoken's audience claim.",
          "type": "string"
        },
        "claimPatterns": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "claim_patterns is a mapping from the name of a custom claim\nto a regular expression for matching that claim's value.",
          "type": "object"
        },
        "claims": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "claims is a mapping from the name of a custom claim\nto a literal matching that claim's value.",
          "type": "object"
        },
        "issuer": {
          "description": "issuer of the OIDC ID tokens issued for this identity.",
          "type": "string"
        },
        "issuerPattern": {
          "description": "issuer_pattern is a regular expression for matching the\ntoken's issuer claim.",
          "type": "string"
        },
        "subject": {
          "description": "subject of OIDC ID tokens issued for this identity.",
          "type": "string"
        },
        "subjectPattern": {
          "description": "subject_pattern is a regular expression for matching the\ntoken's subject claim.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IdentityMetadataOnboardingQuestions": {
      "properties": {
        "companyName": {
          "type": "string"
        },
        "product": {
          "type": "string"
        },
        "providers": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "IdentityProviderOIDC": {
      "properties": {
        "additionalScopes": {
          "items": {
            "type": "string"
          },
          "title": "Additional scopes to request for ID tokens",
          "type": "array"
        },
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "issuer": {
          "title": "Issuer URL (e.g https://accounts.google.com)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IdentityProvidersUpdateBody": {
      "properties": {
        "defaultRole": {
          "description": "default_role is the UIDP of an optional default role\nto grant users of this identity provider.",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "oidc": {
          "$ref": "#/definitions/IdentityProviderOIDC"
        }
      },
      "type": "object"
    },
    "IdentityStaticKeys": {
      "properties": {
        "expiration": {
          "description": "expiration is the time when the issuer_keys will expire.\nDefaults to / Maximum of 30 days after creation time.",
          "format": "date-time",
          "type": "string"
        },
        "issuer": {
          "description": "issuer of the OIDC ID tokens issued for this identity.\nMatches the `iss` claim.",
          "type": "string"
        },
        "issuerKeys": {
          "description": "issuer_keys is JWKS-formatted public keys for the issuer.\nRequired, otherwise use Literal.",
          "type": "string"
        },
        "subject": {
          "description": "subject of OIDC ID tokens issued for this identity.\nMatches the `sub` claim.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ImageConfigExposedPort": {
      "description": "ExposedPorts a set of ports to expose from a container running this image.",
      "type": "object"
    },
    "ImageConfigVolume": {
      "type": "object"
    },
    "RegistryUpdateRepoBody": {
      "properties": {
        "bundles": {
          "description": "bundles is a list of tags/labels that allow us to group repositories to each other for sales purposes.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "catalogTier": {
          "$ref": "#/definitions/registryCatalogTier",
          "description": "catalog_tier is the catalog tier this repository belongs to."
        },
        "name": {
          "description": "name is the human-readable name of the repository.",
          "type": "string"
        },
        "readme": {
          "description": "readme is raw Markdown file contents describing the repo.",
          "type": "string"
        },
        "sync_config": {
          "$ref": "#/definitions/registrySyncConfig",
          "title": "(optional) Repository sync configuration. If enabled, images are synced from the source to this repo.\nNOTE: This property can only be set by Chainguard.\nNote: the json_name defaults to \"syncConfig\" which causes our eventing\nsystem to not work properly (since the protobuf name is \"sync_config\")"
        }
      },
      "type": "object"
    },
    "RegistryUpdateTagBody": {
      "properties": {
        "bundles": {
          "description": "bundles is a list of tags/labels for sales purposes.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "deprecated": {
          "description": "deprecated, true if the tag is deprecated.",
          "type": "boolean"
        },
        "digest": {
          "description": "digest, the digest of the manifest with this tag.",
          "type": "string"
        },
        "lastUpdated": {
          "description": "last time this tag was updated.",
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "description": "name, the unique name of the Tag.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RoleBindingListBinding": {
      "properties": {
        "claimMatchIssuer": {
          "description": "ClaimMatch issuer of the bound identity.",
          "type": "string"
        },
        "claimMatchSubject": {
          "description": "ClaimMatch subject of the bound identity.",
          "type": "string"
        },
        "createdAt": {
          "description": "created_at is the timestamp for when the role binding was created.",
          "format": "date-time",
          "type": "string"
        },
        "email": {
          "description": "verified email of the bound identity.",
          "type": "string"
        },
        "emailUnverified": {
          "description": "unverified email of the bound identity.",
          "type": "string"
        },
        "group": {
          "$ref": "#/definitions/iamGroup",
          "description": "group of the bound role."
        },
        "id": {
          "description": "id, the UID of this role binding.",
          "type": "string"
        },
        "identity": {
          "description": "identity, UID of the Identity bound.",
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/iamRole",
          "description": "role of the bound identity."
        }
      },
      "type": "object"
    },
    "RoleBindingsUpdateBody": {
      "properties": {
        "group": {
          "description": "group, UIDP of the group to bind. This field is ignored and will be removed\nin the future. The group is always the parent of the UIDP.",
          "type": "string"
        },
        "identity": {
          "description": "identity, UID of the Identity to bind.",
          "type": "string"
        },
        "role": {
          "title": "role, UIDP of the Role to bind",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RolesUpdateBody": {
      "properties": {
        "capabilities": {
          "description": "capabilities, human readable list of capabilities supported by the group.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "description": "description, human readable description of group.",
          "type": "string"
        },
        "name": {
          "description": "name, human readable name of group.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Sbom2Source": {
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "INGESTED",
        "GENERATED"
      ],
      "title": "Type",
      "type": "string"
    },
    "ScannerName": {
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "GRYPE",
        "TRIVY"
      ],
      "type": "string"
    },
    "VulnerabilityCVSS": {
      "properties": {
        "score": {
          "description": "score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.",
          "type": "string"
        },
        "version": {
          "description": "version used to populate score and severity.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "VulnerabilityFix": {
      "properties": {
        "state": {
          "$ref": "#/definitions/FixState",
          "description": "state reflects the state of the fix, e.g. fixed, unknown, not-fixed, won't-fix."
        },
        "versions": {
          "description": "List of in versions of the package on which the vulnerability has been solved.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "VulnerabilityRecordCvss": {
      "properties": {
        "score": {
          "description": "CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.",
          "type": "string"
        },
        "version": {
          "description": "CVSS version used to populate score and severity.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "VulnerabilityRecordRelatedVulnerability": {
      "properties": {
        "id": {
          "description": "ID of the vulnerability.",
          "type": "string"
        },
        "source": {
          "description": "Source from where the vulnerability information was obtained, e.g. nvd, github, osv.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "VulnerabilityRecordSeverity": {
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "LOW",
        "MEDIUM",
        "HIGH",
        "CRITICAL"
      ],
      "type": "string"
    },
    "VulnerabilitySeverity": {
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "LOW",
        "MEDIUM",
        "HIGH",
        "CRITICAL"
      ],
      "type": "string"
    },
    "advisoryAdvisory": {
      "properties": {
        "aliases": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "events": {
          "items": {
            "$ref": "#/definitions/advisoryEvent",
            "type": "object"
          },
          "type": "array"
        },
        "id": {
          "description": "id is the identifier of this specific advisory.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "advisoryAnalysisNotPlanned": {
      "properties": {
        "note": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "advisoryDetection": {
      "properties": {
        "manual": {
          "$ref": "#/definitions/DetectionDetectionTypeManual"
        },
        "nvdapi": {
          "$ref": "#/definitions/DetectionDetectionTypeNVDAPI"
        }
      },
      "type": "object"
    },
    "advisoryDocument": {
      "properties": {
        "advisories": {
          "items": {
            "$ref": "#/definitions/advisoryAdvisory",
            "type": "object"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "advisoryDocumentList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/advisoryDocument",
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "advisoryEvent": {
      "properties": {
        "analysisNotPlanned": {
          "$ref": "#/definitions/advisoryAnalysisNotPlanned"
        },
        "detection": {
          "$ref": "#/definitions/advisoryDetection"
        },
        "falsePositiveDetermination": {
          "$ref": "#/definitions/advisoryFalsePositiveDetermination"
        },
        "fixNotPlanned": {
          "$ref": "#/definitions/advisoryFixNotPlanned"
        },
        "fixed": {
          "$ref": "#/definitions/advisoryFixed"
        },
        "pendingUpstreamFix": {
          "$ref": "#/definitions/advisoryPendingUpstreamFix"
        },
        "timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "truePositiveDetermination": {
          "$ref": "#/definitions/advisoryTruePositiveDetermination"
        }
      },
      "type": "object"
    },
    "advisoryFalsePositiveDetermination": {
      "properties": {
        "note": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/advisoryFalsePositiveDeterminationType"
        }
      },
      "type": "object"
    },
    "advisoryFalsePositiveDeterminationType": {
      "default": "FPT_TYPE_UNSPECIFIED",
      "description": " - FPT_TYPE_UNSPECIFIED: The \"unset\" value.\n - FPT_TYPE_VULNERABILITY_RECORD_ANALYSIS_CONTESTED: VEX: vulnerable_code_not_present.\n - FPT_TYPE_COMPONENT_VULNERABILITY_MISMATCH: VEX: component_not_present.\n - FPT_TYPE_VULNERABLE_CODE_VERSION_NOT_USED: VEX: vulnerable_code_not_present.\n - FPT_TYPE_VULNERABLE_CODE_NOT_INCLUDED_IN_PACKAGE: VEX: vulnerable_code_not_present.\n - FPT_TYPE_VULNERABLE_CODE_NOT_IN_EXECUTION_PATH: VEX: vulnerable_code_not_in_execute_path.\n - FPT_TYPE_VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY: VEX: vulnerable_code_cannot_be_controlled_by_adversary.\n - FPT_TYPE_INLINE_MITIGATIONS_EXIST: VEX: inline_mitigations_already_exist.",
      "enum": [
        "FPT_TYPE_UNSPECIFIED",
        "FPT_TYPE_VULNERABILITY_RECORD_ANALYSIS_CONTESTED",
        "FPT_TYPE_COMPONENT_VULNERABILITY_MISMATCH",
        "FPT_TYPE_VULNERABLE_CODE_VERSION_NOT_USED",
        "FPT_TYPE_VULNERABLE_CODE_NOT_INCLUDED_IN_PACKAGE",
        "FPT_TYPE_VULNERABLE_CODE_NOT_IN_EXECUTION_PATH",
        "FPT_TYPE_VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY",
        "FPT_TYPE_INLINE_MITIGATIONS_EXIST"
      ],
      "type": "string"
    },
    "advisoryFixNotPlanned": {
      "properties": {
        "note": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "advisoryFixed": {
      "properties": {
        "fixedVersion": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "advisoryPendingUpstreamFix": {
      "properties": {
        "note": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "advisoryReference": {
      "properties": {
        "type": {
          "$ref": "#/definitions/advisoryReferenceType"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "advisoryReferenceType": {
      "default": "UNSPECIFIED",
      "description": " - UNSPECIFIED: The \"unset\" value.\n - ADVISORY: Published security advisory for the vulnerability.\n - ARTICLE: Article or blog post describing the vulnerability.\n - DETECTION: Scanner or tool that allows detection in prod environments.\n - DISCUSSION: Social media discussion about vuln.\n - REPORT: Report on vuln.\n - FIX: Source code browser link to fix.\n - INTRODUCED: Source code browser link to introduction of vuln.\n - PACKAGE: Home web page for package.\n - EVIDENCE: Demonstration of validity of vuln claim.\n - WEB: Web page of unspecified kind.",
      "enum": [
        "UNSPECIFIED",
        "ADVISORY",
        "ARTICLE",
        "DETECTION",
        "DISCUSSION",
        "REPORT",
        "FIX",
        "INTRODUCED",
        "PACKAGE",
        "EVIDENCE",
        "WEB"
      ],
      "type": "string"
    },
    "advisorySeverity": {
      "properties": {
        "score": {
          "description": "Vector string representing CVSS score based on type.",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/advisorySeverityType",
          "description": "CVSS version standard."
        }
      },
      "type": "object"
    },
    "advisorySeverityType": {
      "default": "UNSPECIFIED",
      "enum": [
        "UNSPECIFIED",
        "CVSS_V2",
        "CVSS_V3",
        "CVSS_V4"
      ],
      "title": "- UNSPECIFIED: The \"unset\" value.\n - CVSS_V2: CVSS v2\n - CVSS_V3: CVSS \u003e= 3.0 and \u003c 4.0\n - CVSS_V4: CVSS \u003e= 4.0 and \u003c 5.0",
      "type": "string"
    },
    "advisoryTruePositiveDetermination": {
      "properties": {
        "note": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "advisoryVulnerabilityMetadata": {
      "properties": {
        "details": {
          "type": "string"
        },
        "id": {
          "description": "id is the identifier of this specific vuln.",
          "type": "string"
        },
        "references": {
          "items": {
            "$ref": "#/definitions/advisoryReference",
            "type": "object"
          },
          "type": "array"
        },
        "severity": {
          "items": {
            "$ref": "#/definitions/advisorySeverity",
            "type": "object"
          },
          "type": "array"
        },
        "summary": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "advisoryVulnerabilityMetadataList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/advisoryVulnerabilityMetadata",
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "apkAPKList": {
      "description": "APKList is a list of APKs.",
      "properties": {
        "items": {
          "description": "The APKs returned by the list request.",
          "items": {
            "$ref": "#/definitions/apkAPKPackage",
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "apkAPKPackage": {
      "description": "APKPackage is an APK package and its metadata.\n\nAn APK can be downloaded by requesting\nhttps://apk.cgr.dev/{group}/{arch}/{pkgname}-{pkgver}.apk\nwith suitable credentials.\n\nThe fields 10+ are the fields that make up the APKINDEX format\nfrom here: https://wiki.alpinelinux.org/wiki/Apk_spec#APKINDEX_Format",
      "properties": {
        "architecture": {
          "description": "Package architecture, the architecture of the package (e.g., x86_64 or\naarch64).",
          "type": "string"
        },
        "buildTime": {
          "description": "Package build time, the time the package was built.",
          "format": "date-time",
          "type": "string"
        },
        "checksum": {
          "description": "Checksum, the checksum of the package.",
          "format": "byte",
          "type": "string"
        },
        "depend": {
          "description": "Package depend, the direct runtime dependencies of the package.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "description": "Package description, a description of the package.",
          "type": "string"
        },
        "id": {
          "description": "id, identifier of this APK, a UIDP under a Group.",
          "type": "string"
        },
        "installIf": {
          "description": "Package install if, the conditions under which the package is installed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "installedSize": {
          "description": "Installed size, the size of the package when installed in bytes.",
          "format": "uint64",
          "type": "string"
        },
        "license": {
          "description": "Package license, the license of the package.",
          "type": "string"
        },
        "maintainer": {
          "description": "Package maintainer, unused.",
          "type": "string"
        },
        "origin": {
          "description": "Package origin, the origin of the package (if the package is a subpackage).",
          "type": "string"
        },
        "packageName": {
          "description": "Package name, the name of the package.",
          "type": "string"
        },
        "providerPriority": {
          "description": "Package provider priority, the priority of the package provider.\nIf multiple packages provide the same virtual package, the package\nwith the highest provider priority is selected.",
          "format": "uint64",
          "type": "string"
        },
        "provides": {
          "description": "Package provides, the virtual packages provided by the package.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "repoCommit": {
          "description": "Package commit, the commit of the package.",
          "type": "string"
        },
        "size": {
          "description": "Package size, the size of the package in bytes.",
          "format": "uint64",
          "type": "string"
        },
        "url": {
          "description": "Package URL, a URL for the package.",
          "type": "string"
        },
        "version": {
          "description": "Package version, the version of the package (e.g., 1.2.3-r4).",
          "type": "string"
        }
      },
      "type": "object"
    },
    "authHeadlessSession": {
      "properties": {
        "ecdhPublicKey": {
          "description": "When establishing a headless session, the client must first provide\ntheir ECDH public key. The server will then generate an ephemeral\nECHD keypair and use the client's public key to establish a symmetric\nkey.\n\nThis symmetric key will be used to encrypt the idtoken and stored the\nencrypted idtoken in the database for a short period, as well as\nreturning it to the client.\n\nAfter the idtoken is encrypted, the server will discard both the shared\nsymmetric key and the ephemeral ECDH private key. The server ECDH will\nbe sent back to the client.\n\nThe client, with their private key, can use this public key to\nestablish the same symmetric key, which can be used to decrypt\nthe idtoken.\n\nechd_public_key is the client's ECDH public key.",
          "format": "byte",
          "type": "string"
        },
        "encryptedIdtoken": {
          "description": "encrypted_idtoken is the encrypted idtoken.",
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object"
    },
    "authRegistrationRequest": {
      "properties": {
        "code": {
          "title": "code is an optional encoded invite code, which allows us to register\nthe caller's identity as a member of a particular group as a particular\nrole.\n+optional",
          "type": "string"
        },
        "identityId": {
          "title": "identity_id is an optional identity id. If the user already exists, this\nby-passes identity registration and continues on to cluster registration\n(if applicable)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "authSession": {
      "properties": {
        "group": {
          "description": "group, the group this identity has joined by invitation, when an invite\ncode was supplied.",
          "type": "string"
        },
        "identity": {
          "description": "identity, the Chainguard identity id.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "authWhoAmI": {
      "properties": {
        "audience": {
          "description": "Audience is who the token is intended for.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "capabilities": {
          "description": "The capabilities referenced in the token.",
          "items": {
            "$ref": "#/definitions/authWhoAmICapability",
            "type": "object"
          },
          "type": "array"
        },
        "email": {
          "description": "The upstream email for this token.",
          "type": "string"
        },
        "expiry": {
          "description": "When the token expires.",
          "format": "date-time",
          "type": "string"
        },
        "issuedAt": {
          "description": "With the token was issued.",
          "format": "date-time",
          "type": "string"
        },
        "issuer": {
          "description": "Issuer is the issuer of the token.",
          "type": "string"
        },
        "subject": {
          "description": "The subject of the token.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "authWhoAmICapability": {
      "properties": {
        "group": {
          "$ref": "#/definitions/iamGroup",
          "description": "group of the bound role."
        },
        "role": {
          "$ref": "#/definitions/iamRole",
          "description": "role of the bound identity."
        }
      },
      "title": "--- Upstream fields ---",
      "type": "object"
    },
    "commonUIDPFilter": {
      "properties": {
        "ancestorsOf": {
          "description": "ancestors_of are groups reachable by repeated proceeding from child to parent.",
          "type": "string"
        },
        "childrenOf": {
          "description": "children_of are groups reachable by directly proceeding from parent to children.",
          "type": "string"
        },
        "descendantsOf": {
          "description": "descendants_of are groups reachable by repeated proceeding from parent to child.",
          "type": "string"
        },
        "inRoot": {
          "title": "in_root resticts responses to root level resources (organizations, user identities)",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "eventsIdentity": {
      "properties": {
        "expiration": {
          "description": "Expiration of identity / issuer keys. After this date /time the issuer\nkeys will not be trusted. Defaults / maximum of 30 days after creation\ntime.",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "id is unique identifier of this specific identity.",
          "type": "string"
        },
        "issuer": {
          "description": "issuer of the OIDC ID tokens issued for this identity. Matches the `iss`\nclaim.",
          "type": "string"
        },
        "issuerKeys": {
          "description": "Optional JWKS formatted public keys for the issuer. If supplied\nverification of ID tokens is attempted using these keys instead of the\nnormal OIDC discovery path. This enables e.g clusters behing NAT to\nauthenticate.",
          "type": "string"
        },
        "subject": {
          "description": "subject of OIDC ID tokens issued for this identity. Matchs the `sub`\nclaim.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "eventsIdentityMetadata": {
      "properties": {
        "name": {
          "description": "Output only. This is the name of the user.",
          "readOnly": true,
          "type": "string"
        },
        "onboardingQuestions": {
          "$ref": "#/definitions/IdentityMetadataOnboardingQuestions"
        },
        "updatesOptIn": {
          "description": "Whether the user has opted to receive updates from Chainguard.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "eventsSubscription": {
      "properties": {
        "id": {
          "description": "id is identifier of this specific subscription.",
          "type": "string"
        },
        "sink": {
          "description": "sink is the address to which events shall be delivered using the selected protocol.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "eventsSubscriptionList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/eventsSubscription",
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "iamAccountAssociations": {
      "properties": {
        "amazon": {
          "$ref": "#/definitions/AccountAssociationsAmazon",
          "description": "amazon holds information associating an Amazon account with the group."
        },
        "chainguard": {
          "$ref": "#/definitions/AccountAssociationsChainguard"
        },
        "description": {
          "description": "a short description of this association.",
          "type": "string"
        },
        "github": {
          "$ref": "#/definitions/AccountAssociationsGitHubInstallation",
          "description": "github holds information associating a GitHub installation with the group.\nNote: this AccountAssociation type is EXPERIMENTAL."
        },
        "google": {
          "$ref": "#/definitions/AccountAssociationsGoogle",
          "description": "google holds information associating a Google project with the group."
        },
        "group": {
          "description": "group is the group with which this account information is associated.",
          "type": "string"
        },
        "name": {
          "description": "name of the association.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "iamAccountAssociationsList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/iamAccountAssociations",
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "iamAccountAssociationsStatus": {
      "properties": {
        "message": {
          "type": "string"
        },
        "ready": {
          "$ref": "#/definitions/AccountAssociationsStatusState"
        },
        "reason": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "iamGroup": {
      "properties": {
        "description": {
          "description": "description, human readable of group.",
          "type": "string"
        },
        "id": {
          "description": "id, The group UIDP under which this group resides.",
          "type": "string"
        },
        "name": {
          "description": "name, human readable name of group.",
          "type": "string"
        },
        "resourceLimits": {
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          },
          "description": "resource_limits indicate the maximum number of resources allowed for this group by type.",
          "type": "object"
        },
        "verified": {
          "title": "verified means we've verified the owners of this organization. Restrictions include:\n- Only organizations (root groups) can be verified\n- Property can only be set by manually by Chainguardians\n- If verified is set, the organizations name field must be globally unique\n- If verified is set the organizations name should be a domain name",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "iamGroupInvite": {
      "properties": {
        "code": {
          "description": "code is the json-encoded authentication code.",
          "type": "string"
        },
        "expiration": {
          "description": "expiration, timestamp this invite becomes no longer valid.",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "id, The group UIDP under which this invite resides.",
          "type": "string"
        },
        "keyId": {
          "description": "key_id is used to identify the verification key for this code.",
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/iamRole",
          "description": "role is the role the invited identity will be role-bound to the group with."
        }
      },
      "type": "object"
    },
    "iamGroupInviteList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/iamStoredGroupInvite",
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "iamGroupList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/iamGroup",
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "iamIdentity": {
      "properties": {
        "awsIdentity": {
          "$ref": "#/definitions/IdentityAWSIdentity",
          "title": "aws_identity matches AWS IAM users and roles to an identity"
        },
        "claimMatch": {
          "$ref": "#/definitions/IdentityClaimMatch",
          "description": "claim_match checks the third party IdP token's claims against one\nor more configured patterns."
        },
        "createdAt": {
          "description": "created_at is the timestamp for when the identity was created.",
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "description": "description, human readable of identity.",
          "type": "string"
        },
        "id": {
          "description": "id is unique identifier of this specific identity.",
          "type": "string"
        },
        "name": {
          "description": "name, human readable name of identity.",
          "type": "string"
        },
        "servicePrincipal": {
          "$ref": "#/definitions/iamServicePrincipal",
          "description": "service_principal is the name of the Chainguard service that is\nallowed to assume this identity.  These names correlate with the\nservice names used in impersonation with account associations."
        },
        "static": {
          "$ref": "#/definitions/IdentityStaticKeys",
          "description": "static is equivalent to literal, but instead of discovering the\nIdP's verification keys we verify the identity using pre-registered\nverification keys.  This is intended for use with identities from\nproviders without an \"online\" issuer (network accessible to our IdP),\nsuch as a KinD/minikube cluster.\nNOTE: because this path does not have a mechanism for key rotation\nthe identity will expire, with a maximum lifetime of 30d."
        },
        "updatedAt": {
          "description": "updated_at is the timestamp for when the identity was last updated.",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "iamIdentityList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/iamIdentity",
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "iamIdentityProvider": {
      "properties": {
        "defaultRole": {
          "description": "default_role is the UIDP of an optional default role\nto grant users of this identity provider.",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "title": "id is unique identifier of this specific identity provider",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "oidc": {
          "$ref": "#/definitions/IdentityProviderOIDC"
        }
      },
      "type": "object"
    },
    "iamIdentityProviderList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/iamIdentityProvider",
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "iamRole": {
      "properties": {
        "capabilities": {
          "description": "capabilities, human readable list of capabilities supported by the group.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "description": "description, human readable description of group.",
          "type": "string"
        },
        "id": {
          "description": "id, The Group path under which this Role resides.",
          "type": "string"
        },
        "name": {
          "description": "name, human readable name of group.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "iamRoleBinding": {
      "properties": {
        "group": {
          "description": "group, UIDP of the group to bind. This field is ignored and will be removed\nin the future. The group is always the parent of the UIDP.",
          "type": "string"
        },
        "id": {
          "description": "id, the UID of this role binding.",
          "type": "string"
        },
        "identity": {
          "description": "identity, UID of the Identity to bind.",
          "type": "string"
        },
        "role": {
          "title": "role, UIDP of the Role to bind",
          "type": "string"
        }
      },
      "type": "object"
    },
    "iamRoleBindingList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/RoleBindingListBinding",
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "iamRoleList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/iamRole",
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "iamServicePrincipal": {
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "COSIGNED",
        "INGESTER",
        "CATALOG_SYNCER",
        "APKO_BUILDER"
      ],
      "type": "string"
    },
    "iamStoredGroupInvite": {
      "properties": {
        "createdAt": {
          "description": "created_at is the timestamp for when the invite was created.",
          "format": "date-time",
          "type": "string"
        },
        "email": {
          "description": "email is the email address that is allowed to accept this invite code. If blank,\nanyone with the invite code an accept.",
          "type": "string"
        },
        "expiration": {
          "description": "expiration, timestamp this invite becomes no longer valid.",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "id, The group UIDP under which this invite resides.",
          "type": "string"
        },
        "keyId": {
          "description": "key_id is used to identify the verification key for this code.",
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/iamRole",
          "description": "role is the role the invited identity will be role-bound to the group with."
        },
        "singleUse": {
          "description": "single_use indicates whether or not the invite will be deleted after a user joins the group.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "notificationsAccount": {
      "properties": {
        "createdAt": {
          "description": "when the account was created.",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "id of the account.",
          "type": "string"
        },
        "name": {
          "description": "name of the account.",
          "type": "string"
        },
        "updatedAt": {
          "description": "when the account was last updated.",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "notificationsAuthor": {
      "properties": {
        "email": {
          "description": "email of the author.",
          "type": "string"
        },
        "id": {
          "description": "id of the author.",
          "type": "string"
        },
        "name": {
          "description": "name of the author.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "notificationsNotification": {
      "properties": {
        "account": {
          "$ref": "#/definitions/notificationsAccount",
          "description": "account associated with the notification."
        },
        "accountId": {
          "description": "account id associated with the notification.",
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/notificationsAuthor",
          "description": "author associated with the notification."
        },
        "authorId": {
          "description": "author id associated with the notification.",
          "type": "string"
        },
        "categoryId": {
          "description": "id of the category the notification belongs to.",
          "type": "string"
        },
        "createdAt": {
          "description": "when the notification was created.",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "id is the identifier of this specific notification.",
          "type": "string"
        },
        "note": {
          "description": "the body of the notification.",
          "type": "string"
        },
        "noteDate": {
          "description": "date when the notification was created.",
          "format": "date-time",
          "type": "string"
        },
        "subject": {
          "description": "subject or title of the notification.",
          "type": "string"
        },
        "tags": {
          "description": "tags associated with the notification.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "traits": {
          "$ref": "#/definitions/notificationsTraits",
          "description": "traits associated with the notification."
        },
        "updatedAt": {
          "description": "when the notification was last updated.",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "notificationsNotificationsFilterLocation": {
      "default": "UNSPECIFIED",
      "description": " - UNSPECIFIED: The \"unset\" value.\n - CONSOLE: Console.\n - DIRECTORY: Directory.\n - CHAINCTL: Chainctl.",
      "enum": [
        "UNSPECIFIED",
        "CONSOLE",
        "DIRECTORY",
        "CHAINCTL"
      ],
      "type": "string"
    },
    "notificationsNotificationsList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/notificationsNotification",
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "notificationsTraits": {
      "properties": {
        "approved": {
          "description": "whether or not notification has been approved.",
          "type": "boolean"
        },
        "chainctl": {
          "description": "show notification for chainctl users.",
          "type": "boolean"
        },
        "console": {
          "description": "show notification in console.",
          "type": "boolean"
        },
        "directory": {
          "description": "show notification in directory.",
          "type": "boolean"
        },
        "expires": {
          "description": "expiration date of the notification.",
          "format": "date-time",
          "type": "string"
        },
        "starts": {
          "description": "start date of the notification.",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "oidcRawToken": {
      "properties": {
        "refreshToken": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "oidcTokenPair": {
      "description": "ExchangeRefreshToken returns a pair of token, in order to allow\nrefresh token to also be rotated.",
      "properties": {
        "refreshToken": {
          "$ref": "#/definitions/oidcRawToken"
        },
        "token": {
          "$ref": "#/definitions/oidcRawToken"
        }
      },
      "type": "object"
    },
    "pingResponse": {
      "properties": {
        "response": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "protobufAny": {
      "additionalProperties": {},
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "registryArchs": {
      "properties": {
        "archs": {
          "description": "Architectures belonging to the requested digest's manifests.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "registryCatalogTier": {
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "FREE",
        "STANDARD",
        "PREMIUM",
        "APPLICATION",
        "BASE",
        "FIPS",
        "AI"
      ],
      "type": "string"
    },
    "registryImageConfig": {
      "properties": {
        "cmd": {
          "description": "Cmd defines the default arguments to the entrypoint of the container.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "entrypoint": {
          "description": "Entrypoint defines a list of arguments to use as the command to execute when the container starts.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "description": "Env is a list of environment variables to be used in a container.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "exposedPorts": {
          "additionalProperties": {
            "$ref": "#/definitions/ImageConfigExposedPort"
          },
          "type": "object"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels contains arbitrary metadata for the container.",
          "type": "object"
        },
        "stopSignal": {
          "description": "StopSignal contains the system call signal that will be sent to the container to exit.",
          "type": "string"
        },
        "user": {
          "description": "User defines the username or UID which the process in the container should run as.",
          "type": "string"
        },
        "volumes": {
          "additionalProperties": {
            "$ref": "#/definitions/ImageConfigVolume"
          },
          "description": "Volumes is a set of directories describing where the process is likely write data specific to a container instance.",
          "type": "object"
        },
        "workingDir": {
          "description": "WorkingDir sets the current working directory of the entrypoint process in the container.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "registryManifestMetadata": {
      "properties": {
        "digest": {
          "description": "Digest of image that packages are associated with.",
          "type": "string"
        },
        "pkgMetadata": {
          "description": "List of packages that are part of image.",
          "items": {
            "$ref": "#/definitions/registryPkgMetadata",
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "registryManifestMetadataFilterEntry": {
      "properties": {
        "imageDigest": {
          "title": "For fetching metadata for an image digest",
          "type": "string"
        },
        "indexFilter": {
          "$ref": "#/definitions/registryManifestMetadataIndexFilter",
          "title": "For fetching metadata for an index digest"
        }
      },
      "type": "object"
    },
    "registryManifestMetadataIndexFilter": {
      "properties": {
        "arch": {
          "description": "The architecture to fetch metadata for.",
          "type": "string"
        },
        "digest": {
          "description": "The tag/index digest to fetch metadata for.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "registryManifestMetadataList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/registryManifestMetadata",
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "registryPackageVersion": {
      "properties": {
        "eolDate": {
          "title": "the date when this version goes eol",
          "type": "string"
        },
        "exists": {
          "title": "whether or not the package exists in an apk repo",
          "type": "boolean"
        },
        "fips": {
          "title": "whether or not a FIPS-enabled version of the package exists in an apk repo",
          "type": "boolean"
        },
        "lts": {
          "title": "may be set to a date or true if the software is marked as lts",
          "type": "string"
        },
        "releaseDate": {
          "title": "the date this version was release",
          "type": "string"
        },
        "version": {
          "title": "the version stream identifier",
          "type": "string"
        }
      },
      "type": "object"
    },
    "registryPackageVersionMetadata": {
      "properties": {
        "eolVersions": {
          "items": {
            "$ref": "#/definitions/registryPackageVersion",
            "type": "object"
          },
          "title": "list of versions which are now eol",
          "type": "array"
        },
        "lastUpdatedTimestamp": {
          "title": "the last time this data was updated",
          "type": "string"
        },
        "latestVersion": {
          "title": "the latest version of the software",
          "type": "string"
        },
        "versions": {
          "items": {
            "$ref": "#/definitions/registryPackageVersion",
            "type": "object"
          },
          "title": "list of versions which are active",
          "type": "array"
        }
      },
      "title": "This type mimics the \"status\" section from the original\nYAML files located at https://github.com/chainguard-dev/package-version-metadata",
      "type": "object"
    },
    "registryPkgMetadata": {
      "properties": {
        "buildTimestamp": {
          "format": "date-time",
          "title": "timestamp when package was built, date 0-0-0 when build timestamp not available",
          "type": "string"
        },
        "eolDate": {
          "format": "date-time",
          "title": "date when EOL, date 0-0-0 when not eol",
          "type": "string"
        },
        "license": {
          "title": "license of package, empty if unknown",
          "type": "string"
        },
        "originPurl": {
          "title": "if differ from purl, it means it is a subpackage",
          "type": "string"
        },
        "purl": {
          "title": "purl of package or subpackage; spec https://github.com/package-url/purl-spec",
          "type": "string"
        }
      },
      "type": "object"
    },
    "registryRawSbom": {
      "properties": {
        "rawSbom": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "registryRawVulnReport": {
      "properties": {
        "createdAt": {
          "description": "created_at is the time the report was generated.",
          "format": "date-time",
          "type": "string"
        },
        "digest": {
          "description": "digest is the exact digest of the scanned image.",
          "type": "string"
        },
        "rawReport": {
          "description": "raw_report is a JSON string of the raw report output from the scanner.\nThis is only populated for reports with size less than the maximum allowed.",
          "type": "string"
        },
        "rawReportUrl": {
          "description": "raw_report_url is an expiring URL for a direct download of the\nraw scan report.",
          "type": "string"
        },
        "scanner": {
          "$ref": "#/definitions/registryScanner",
          "description": "scanner is the details of the scanner that generated this report."
        }
      },
      "type": "object"
    },
    "registryRepo": {
      "properties": {
        "bundles": {
          "description": "bundles is a list of tags/labels that allow us to group repositories to each other for sales purposes.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "catalogTier": {
          "$ref": "#/definitions/registryCatalogTier",
          "description": "catalog_tier is the catalog tier this repository belongs to."
        },
        "id": {
          "description": "id is the identifier of this specific repository.",
          "type": "string"
        },
        "name": {
          "description": "name is the human-readable name of the repository.",
          "type": "string"
        },
        "readme": {
          "description": "readme is raw Markdown file contents describing the repo.",
          "type": "string"
        },
        "sync_config": {
          "$ref": "#/definitions/registrySyncConfig",
          "title": "(optional) Repository sync configuration. If enabled, images are synced from the source to this repo.\nNOTE: This property can only be set by Chainguard.\nNote: the json_name defaults to \"syncConfig\" which causes our eventing\nsystem to not work properly (since the protobuf name is \"sync_config\")"
        }
      },
      "type": "object"
    },
    "registryRepoList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/registryRepo",
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "registryScanner": {
      "properties": {
        "dbBuildTime": {
          "description": "db_build_time is the time the vulnerability database was built that was used\nto generate the report.",
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/ScannerName",
          "description": "name is the name of the scanner."
        },
        "version": {
          "description": "scanner_version is the version of the scanner used to generate the report.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "registrySize": {
      "properties": {
        "arch": {
          "description": "Architecture.",
          "type": "string"
        },
        "size": {
          "description": "Size per manifest digest, by architecture.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "registrySyncConfig": {
      "properties": {
        "amazon": {
          "description": "AWS ECR repo to sync to.",
          "type": "string"
        },
        "apkoOverlay": {
          "description": "An apko configuration overlay to rebuild images with when syncing them.",
          "type": "string"
        },
        "expiration": {
          "description": "When the catalog syncer should stop syncing from the source repository.",
          "format": "date-time",
          "type": "string"
        },
        "google": {
          "description": "GCP Artifact Registry repo to sync to.",
          "type": "string"
        },
        "source": {
          "description": "Repo ID to sync from.",
          "type": "string"
        },
        "syncApks": {
          "description": "Controls whether to synchronize APKs for the images in this repository\nto the enclosing Chainguard group.",
          "type": "boolean"
        },
        "uniqueTags": {
          "description": "Controls whether exported tags will be uniquely labeled.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "registryTag": {
      "properties": {
        "bundles": {
          "description": "bundles is a list of tags/labels for sales purposes.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "deprecated": {
          "description": "deprecated, true if the tag is deprecated.",
          "type": "boolean"
        },
        "digest": {
          "description": "digest, the digest of the manifest with this tag.",
          "type": "string"
        },
        "id": {
          "description": "id, identifier of this Tag, a UIDP under a Repo.",
          "type": "string"
        },
        "lastUpdated": {
          "description": "last time this tag was updated.",
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "description": "name, the unique name of the Tag.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "registryTagHistory": {
      "properties": {
        "digest": {
          "type": "string"
        },
        "updateTimestamp": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "registryTagHistoryList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/registryTagHistory",
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "registryTagList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/registryTag",
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "registryVulnReport": {
      "properties": {
        "createdAt": {
          "description": "created_at is the time the report was generated.",
          "format": "date-time",
          "type": "string"
        },
        "digest": {
          "description": "digest is the exact digest of the scanned image.",
          "type": "string"
        },
        "scanner": {
          "$ref": "#/definitions/registryScanner",
          "description": "scanner is the details of the scanner used to generate the report."
        },
        "vulnerabilities": {
          "items": {
            "$ref": "#/definitions/registryVulnerability",
            "type": "object"
          },
          "title": "vulnerabilities are the found vulns in the scanned image.\nFor Create",
          "type": "array"
        }
      },
      "type": "object"
    },
    "registryVulnReportList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/registryVulnReport",
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "registryVulnerability": {
      "properties": {
        "aliases": {
          "description": "aliases are other identifiers for this vulnerability.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "cvss": {
          "description": "List of CVSS information about the exploitability of the vulnerability.",
          "items": {
            "$ref": "#/definitions/VulnerabilityCVSS",
            "type": "object"
          },
          "type": "array"
        },
        "description": {
          "description": "description is a short description of the vulnerability.",
          "type": "string"
        },
        "details": {
          "description": "details give additional textual details about the vulnerability.",
          "type": "string"
        },
        "fix": {
          "$ref": "#/definitions/VulnerabilityFix",
          "description": "fix is the version and state of a potential fix for this vulnerability."
        },
        "id": {
          "title": "The unique identifier for the vulnerability.\ne.g. CVE-2024-12345",
          "type": "string"
        },
        "locations": {
          "description": "locations are paths affected by the vulnerability.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "purls": {
          "description": "purls are the package URLs of the affected packages.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "relatedUrls": {
          "description": "URLs related to this vulnerability.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/VulnerabilitySeverity",
          "description": "severity is the value representing the severity of the vulnerability."
        }
      },
      "type": "object"
    },
    "rpcStatus": {
      "properties": {
        "code": {
          "format": "int32",
          "type": "integer"
        },
        "details": {
          "items": {
            "$ref": "#/definitions/protobufAny",
            "type": "object"
          },
          "type": "array"
        },
        "message": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "tenantAttestation": {
      "description": "Attestation represents a normalized Attestation that we have ingested into our datastore.\nThey are linked to Signatures via ID, as in they are 'children' of Signatures\nThere can be multiple of these that we keep.",
      "properties": {
        "description": {
          "title": "Short description of the Attestation",
          "type": "string"
        },
        "digest": {
          "title": "digest of the Attestation when ingested",
          "type": "string"
        },
        "format": {
          "title": "format holds the Document format type",
          "type": "string"
        },
        "generatedAt": {
          "description": "generated_at holds when the Attestation was generated.",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "id, The Attestation UIDP at which this Attestation resides in the hierarchy.",
          "type": "string"
        },
        "name": {
          "description": "Name of the Attestation.",
          "type": "string"
        },
        "rawAttestation": {
          "format": "byte",
          "title": "raw_attestation is a free form type to stub in any attestations so we don't end up a\nadding new tables for all the new type of attestations, initial goal is to add image configs\nand anything which comes up after that",
          "type": "string"
        }
      },
      "type": "object"
    },
    "tenantAttestationList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/tenantAttestation",
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "tenantComponentGraph": {
      "properties": {
        "edges": {
          "items": {
            "$ref": "#/definitions/ComponentGraphEdge",
            "type": "object"
          },
          "type": "array"
        },
        "nodes": {
          "items": {
            "$ref": "#/definitions/ComponentGraphNode",
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "tenantFile2": {
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "types": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "tenantFix": {
      "properties": {
        "state": {
          "$ref": "#/definitions/FixState",
          "description": "state reflects the state of the fix, e.g. fixed, unknown, not-fixed, won't-fix."
        },
        "versions": {
          "description": "List of in versions of the package on which the vulnerability has been solved.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "tenantPackage2": {
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "license": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "purl": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "tenantSbom2": {
      "description": "Sbom represents a normalized SBOM that we have ingested into our datastore.\nThey are linked to Signatures via ID, as in they are 'children' of Signatures\nThere can be multiple of these that we keep.",
      "properties": {
        "authors": {
          "description": "authors is zero or more authors concatenated.",
          "type": "string"
        },
        "description": {
          "title": "Short description of the Sbom",
          "type": "string"
        },
        "digest": {
          "title": "digest of the SBOM when ingested",
          "type": "string"
        },
        "format": {
          "description": "format holds whether the SBOM is SPDX, CycloneDX, or other.",
          "type": "string"
        },
        "generatedAt": {
          "description": "generated_at holds when the SBOM was generated.",
          "format": "date-time",
          "type": "string"
        },
        "graph": {
          "$ref": "#/definitions/tenantComponentGraph"
        },
        "id": {
          "description": "id, The Sbom UIDP at which this Sbom resides in the hierarchy.",
          "type": "string"
        },
        "lastSeen": {
          "format": "date-time",
          "title": "last_seen tracks the timestamp at which this sbom was last seen.\nTODO(vaikas): Does this really make any sense?",
          "type": "string"
        },
        "name": {
          "description": "Name of the Sbom.",
          "type": "string"
        },
        "rawSbom": {
          "description": "raw_sbom may or may not be useful in the long term, but for now to make\nprogress on this, we'll just yolo and serialize it here.",
          "format": "byte",
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/Sbom2Source",
          "description": "source is where the SBOM came from. For example, we want to know if sbom\nwas generated by us, or ingested."
        },
        "tool": {
          "description": "tool holds the name of the tool that produced the SBOM.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "tenantSbom2List": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/tenantSbom2",
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "tenantScanner": {
      "properties": {
        "name": {
          "description": "name contains the vendor name of the scanner.",
          "type": "string"
        },
        "version": {
          "description": "version holds the version of the used scanner to generate the report.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "tenantVulnReport": {
      "properties": {
        "id": {
          "description": "id, The VulnReport UIDP at which this VulnReport resides.",
          "type": "string"
        },
        "lastSeen": {
          "description": "last_seen tracks the timestamp at which this vuln report was last seen.",
          "format": "date-time",
          "type": "string"
        },
        "rawVulnReport": {
          "description": "raw_vuln_report may or may not be useful in the long term, but for now to make\nprogress on this, we'll just yolo and serialize it here.",
          "format": "byte",
          "type": "string"
        },
        "reportGeneration": {
          "description": "report_generation tracks the timestamp at which this report was generated.",
          "format": "date-time",
          "type": "string"
        },
        "scanner": {
          "$ref": "#/definitions/tenantScanner",
          "description": "scanner contains some information about the scanner used to generate the report."
        },
        "vulnerabilityDbLastBuildTime": {
          "description": "vulnerability_db_last_build_time holds the time when the vulnerability database was built last time.",
          "format": "date-time",
          "type": "string"
        },
        "vulnerabilityMatches": {
          "description": "Report's list of vulnerability matches(s).",
          "items": {
            "$ref": "#/definitions/tenantVulnerabilityMatch",
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "tenantVulnReportList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/tenantVulnReport",
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "tenantVulnerabilityMatch": {
      "properties": {
        "fix": {
          "$ref": "#/definitions/tenantFix",
          "description": "Fix related data about this vulnerability."
        },
        "pkg": {
          "$ref": "#/definitions/tenantPackage2",
          "description": "Package affected by this vulnerability."
        },
        "vulnerability": {
          "$ref": "#/definitions/tenantVulnerabilityRecord",
          "description": "Vulnerability holds information about the found vulnerability."
        }
      },
      "type": "object"
    },
    "tenantVulnerabilityRecord": {
      "properties": {
        "advisories": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "advisories related to this vulnerability.",
          "type": "object"
        },
        "cpeUri": {
          "description": "List of cpe_uri on which the vulnerability was found.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "cvss": {
          "description": "List of cvss information about the exploitability of the vulnerability.",
          "items": {
            "$ref": "#/definitions/VulnerabilityRecordCvss",
            "type": "object"
          },
          "type": "array"
        },
        "description": {
          "description": "a short description of this vulnerability.",
          "type": "string"
        },
        "displayId": {
          "description": "display_id is the normalized value of the vulnerability ID often defined by a CVE-ID.",
          "type": "string"
        },
        "id": {
          "description": "id of the vulnerability e.g. CVE_1231-12.",
          "type": "string"
        },
        "relatedUrls": {
          "description": "URLs related to this vulnerability.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "relatedVulnerabilities": {
          "description": "related vulnerabilities to the main vulnerability reported here.",
          "items": {
            "$ref": "#/definitions/VulnerabilityRecordRelatedVulnerability",
            "type": "object"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/VulnerabilityRecordSeverity",
          "title": "severity is the value representing the severity of the vulnerability"
        },
        "source": {
          "description": "source from where the vulnerability information was obtained, e.g. nvd, github, osv.",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "produces": null,
  "consumes": null,
  "tags": [
    {
      "name": "SecurityAdvisory"
    },
    {
      "name": "APK"
    },
    {
      "name": "Auth"
    },
    {
      "name": "Identities"
    },
    {
      "name": "Subscriptions"
    },
    {
      "name": "GroupAccountAssociations"
    },
    {
      "name": "Groups"
    },
    {
      "name": "GroupInvites"
    },
    {
      "name": "Identities"
    },
    {
      "name": "IdentityProviders"
    },
    {
      "name": "Roles"
    },
    {
      "name": "RoleBindings"
    },
    {
      "name": "Notifications"
    },
    {
      "name": "SecurityTokenService"
    },
    {
      "name": "PingService"
    },
    {
      "name": "Registry"
    },
    {
      "name": "Vulnerabilities"
    },
    {
      "name": "Attestations"
    },
    {
      "name": "Sboms"
    },
    {
      "name": "VulnReports"
    }
  ]
}
